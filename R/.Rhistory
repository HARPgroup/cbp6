mod.scenario2 <- params$mod.scenario2
cn1 <- params$cn1
cn2 <- params$cn2
cbp6_link <- paste0(github_link, "/cbp6/code");
source(paste0(cbp6_link,"/cbp6_functions.R"))
source(paste(github_link,"auth.private", sep = "/"));#load rest username and password, contained in
source(paste(cbp6_link, "/fn_vahydro-1.0.R", sep = ''))
token <- rest_token(site, token, rest_uname, rest_pw);
options(timeout=1200); # set timeout to twice default level to avoid abort due to high traffic
if (gage_number == FALSE | is.na(gage_number) == TRUE) {
gage_number <- '00000000'
}
# LOADING DATA ------------------------------------------------------------
if (dat.source1 == 'vahydro') {
data1 <- vahydro_import_data_cfs(riv.seg, run.id1, token, site, start.date, end.date)
#cn1 <- paste0('VA Hydro ', mod.scenario1)
} else if (dat.source1 == 'gage') {
data1 <- gage_import_data_cfs(gage_number, start.date, end.date)
#cn1 <- paste0('USGS ', gage_number)
} else if (dat.source1 == 'cbp_model') {
#cn1 <- paste0('CBP ', mod.scenario1)
if (site.or.server == 'site') {
data1 <- model_import_data_cfs(riv.seg, mod.phase1, mod.scenario1, start.date, end.date)
} else if (site.or.server == 'server') {
data1 <- model_server_import_data_cfs(riv.seg, mod.phase1, mod.scenario1, start.date, end.date)
}
}
if (dat.source2 == 'vahydro') {
data2 <- vahydro_import_data_cfs(riv.seg, run.id2, token, site, start.date, end.date)
#cn2 <- paste0('VA Hydro ', mod.scenario2)
} else if (dat.source2 == 'gage') {
data2 <- gage_import_data_cfs(gage_number, start.date, end.date)
#cn2 <- paste0('USGS ', gage_number)
} else if (dat.source2 == 'cbp_model') {
#cn2 <- paste0('CBP ', mod.scenario2)
if (site.or.server == 'site') {
data2 <- model_import_data_cfs(riv.seg, mod.phase2, mod.scenario2, start.date, end.date)
} else if (site.or.server == 'server') {
data2 <- model_server_import_data_cfs(riv.seg, mod.phase2, mod.scenario2, start.date, end.date)
}
}
# TRIMMING DATA TO PROPER WATER YEAR
data1 <- water_year_trim(data1)
data2 <- water_year_trim(data2)
if (dat.source1 == 'vahydro') {
title.part.1 <- paste('VA Hydro Run ', run.id1, sep = '')
} else if (dat.source1 == 'gage') {
title.part.1 <- paste('USGS Gage ', gage_number, sep = '')
} else if (dat.source1 == 'cbp_model') {
title.part.1 <- paste('Scenario ', mod.scenario1, sep = '')
}
if (dat.source2 == 'vahydro') {
title.part.2 <- paste('VA Hydro Run ', run.id2, sep = '')
} else if (dat.source2 == 'gage') {
title.part.2 <- paste('USGS Gage ', gage_number, sep = '')
} else if (dat.source2 == 'cbp_model') {
title.part.2 <- paste('Scenario ', mod.scenario2, sep = '')
}
dashboard_title <- paste('River Segment ', riv.seg, ': ', title.part.1, ' vs. ', title.part.2, sep = '')
# Creating Data Frame with calculated metrics
metrics1 <- metrics_calc_all(data1)
metrics2 <- metrics_calc_all(data2)
percent_difference <- metrics_compare(metrics1, metrics2, riv.seg)
all_data <- all_data_maker(data1, data2)
# GETTING/CREATING SCENARIO PROPERTIES FROM VA HYDRO
scenprop1 <- get.scen.prop(riv.seg, mod.scenario1, dat.source1, run.id1, start.date, end.date, site, token)
scenprop2 <- get.scen.prop(riv.seg, mod.scenario2, dat.source2, run.id2, start.date, end.date, site, token)
# POSTING METRICS TO SCENARIO PROPERTIES ON VA HYDRO
vahydro_post_all_metrics_to_scenprop(scenprop1, metrics1, site, token)
vahydro_post_all_metrics_to_scenprop(scenprop2, metrics2, site, token)
# linking land-river segments
cbp6.landunits <- link.cbp6.lrseg.hydrocodes(riv.seg, psk, site, token)
if (dat.source1 != 'vahydro') {
run.id <- run.id2
} else {
run.id <- run.id1
}
# Downloading local runoff inflow data
lri.dat <- vahydro_import_local.runoff.inflows_cfs(riv.seg, run.id, token, site, start.date, end.date);
lri.dat <- subset(lri.dat, lri.dat$date >= start.date & lri.dat$date <= end.date);
# Creating all tables
Table1 <- tab1.monthly.low.flows(percent_difference, cn1, cn2)
Table2 <- tab2.monthly.average.flows(percent_difference, cn1, cn2)
Table3 <- tab3.monthly.high.flows(percent_difference, cn1, cn2)
Table4 <- tab4.period.low.flows(percent_difference, cn1, cn2)
Table5 <- tab5.period.high.flows(percent_difference, cn1, cn2)
Table6 <- tab6.nonexceedence.flows(percent_difference, cn1, cn2)
for (i in 1:length(cbp6.landunits)) {
tmp.data <- vahydro_import_lrseg_all_flows(cbp6.landunits[i], run.id, token, site, start.date, end.date)
tmp.data <- tmp.data[complete.cases(tmp.data),]
namer <- paste0('tab.', cbp6.landunits[i], '.means.by.flow')
tmp.tab <- tab.means.by.lrseg.flow(tmp.data)
assign(namer, tmp.tab)
namer <- paste0('tab.', cbp6.landunits[i], '.zero.day.ratios.by.flow')
tmp.tab <- tab.zero.day.ratios.by.lrseg.flow(tmp.data)
assign(namer, tmp.tab)
namer <- paste0('tab.SURO.', cbp6.landunits[i], '.iqr.by.lrseg.flow.annual')
tmp.tab <- tab.iqr.by.lrseg.flow.annual(tmp.data, flow.abbreviation = 'suro')
assign(namer, tmp.tab)
namer <- paste0('tab.IFWO.', cbp6.landunits[i], '.iqr.by.lrseg.flow.annual')
tmp.tab <- tab.iqr.by.lrseg.flow.annual(tmp.data, flow.abbreviation = 'ifwo')
assign(namer, tmp.tab)
namer <- paste0('tab.AGWO.', cbp6.landunits[i], '.iqr.by.lrseg.flow.annual')
tmp.tab <- tab.iqr.by.lrseg.flow.annual(tmp.data, flow.abbreviation = 'agwo')
assign(namer, tmp.tab)
namer <- paste0('tab.', cbp6.landunits[i], '.means.by.land.use')
tmp.tab <- tab.means.by.lrseg.land.use(tmp.data)
assign(namer, tmp.tab)
namer <- paste0('tab.', cbp6.landunits[i], '.zero.day.ratios.by.land.use')
tmp.tab <- tab.zero.day.ratios.by.lrseg.land.use(tmp.data)
assign(namer, tmp.tab)
}
wd <- getwd()
tab.iqr.by.lrseg.lri.annual <- tab.iqr.by.lrseg.lri.annual(lri.dat)
# Creating all plots
fig1.hydrograph(all_data, cn1, cn2)
fig2.zoomed.hydrograph(all_data, cn1, cn2)
fig3.flow.exceedance(all_data, cn1, cn2)
fig4.baseflow.hydrograph(all_data, cn1, cn2)
fig5.combined.hydrograph(all_data)
OUTPUT_MATRIXsaver <- figs6to8.largest.diff.periods(all_data, cn1, cn2)
fig9a.residual.plot(all_data, cn1, cn2)
fig9b.area.weighted.residual.plot(all_data, riv.seg, token, site, cn1, cn2)
fig10.runit.boxplot(lri.dat)
figs11to13.smallest.diff.periods(all_data, cn1, cn2)
fig.gis(riv.seg, site_number = gage_number, site_url = site, cbp6_link, token)
library(knitr)
riv.seg <- params$riv.seg
dat.source1 <- params$dat.source1
dat.source2 <- params$dat.source2
start.date <- params$start.date
end.date <- params$end.date
github_link <- params$github_link
site <- params$site
site.or.server <- params$site.or.server
run.id1 <- params$run.id1
run.id2 <- params$run.id2
gage_number <- params$gage_number
mod.phase1 <- params$mod.phase1
mod.scenario1 <- params$mod.scenario1
mod.phase2 <- params$mod.phase2
mod.scenario2 <- params$mod.scenario2
cn1 <- params$cn1
cn2 <- params$cn2
cbp6_link <- paste0(github_link, "/cbp6/code");
source(paste0(cbp6_link,"/cbp6_functions.R"))
source(paste(github_link,"auth.private", sep = "/"));#load rest username and password, contained in
source(paste(cbp6_link, "/fn_vahydro-1.0.R", sep = ''))
token <- rest_token(site, token, rest_uname, rest_pw);
options(timeout=1200); # set timeout to twice default level to avoid abort due to high traffic
if (gage_number == FALSE | is.na(gage_number) == TRUE) {
gage_number <- '00000000'
}
# LOADING DATA ------------------------------------------------------------
if (dat.source1 == 'vahydro') {
data1 <- vahydro_import_data_cfs(riv.seg, run.id1, token, site, start.date, end.date)
#cn1 <- paste0('VA Hydro ', mod.scenario1)
} else if (dat.source1 == 'gage') {
data1 <- gage_import_data_cfs(gage_number, start.date, end.date)
#cn1 <- paste0('USGS ', gage_number)
} else if (dat.source1 == 'cbp_model') {
#cn1 <- paste0('CBP ', mod.scenario1)
if (site.or.server == 'site') {
data1 <- model_import_data_cfs(riv.seg, mod.phase1, mod.scenario1, start.date, end.date)
} else if (site.or.server == 'server') {
data1 <- model_server_import_data_cfs(riv.seg, mod.phase1, mod.scenario1, start.date, end.date)
}
}
if (dat.source2 == 'vahydro') {
data2 <- vahydro_import_data_cfs(riv.seg, run.id2, token, site, start.date, end.date)
#cn2 <- paste0('VA Hydro ', mod.scenario2)
} else if (dat.source2 == 'gage') {
data2 <- gage_import_data_cfs(gage_number, start.date, end.date)
#cn2 <- paste0('USGS ', gage_number)
} else if (dat.source2 == 'cbp_model') {
#cn2 <- paste0('CBP ', mod.scenario2)
if (site.or.server == 'site') {
data2 <- model_import_data_cfs(riv.seg, mod.phase2, mod.scenario2, start.date, end.date)
} else if (site.or.server == 'server') {
data2 <- model_server_import_data_cfs(riv.seg, mod.phase2, mod.scenario2, start.date, end.date)
}
}
# TRIMMING DATA TO PROPER WATER YEAR
data1 <- water_year_trim(data1)
data2 <- water_year_trim(data2)
if (dat.source1 == 'vahydro') {
title.part.1 <- paste('VA Hydro Run ', run.id1, sep = '')
} else if (dat.source1 == 'gage') {
title.part.1 <- paste('USGS Gage ', gage_number, sep = '')
} else if (dat.source1 == 'cbp_model') {
title.part.1 <- paste('Scenario ', mod.scenario1, sep = '')
}
if (dat.source2 == 'vahydro') {
title.part.2 <- paste('VA Hydro Run ', run.id2, sep = '')
} else if (dat.source2 == 'gage') {
title.part.2 <- paste('USGS Gage ', gage_number, sep = '')
} else if (dat.source2 == 'cbp_model') {
title.part.2 <- paste('Scenario ', mod.scenario2, sep = '')
}
dashboard_title <- paste('River Segment ', riv.seg, ': ', title.part.1, ' vs. ', title.part.2, sep = '')
library(knitr)
riv.seg <- params$riv.seg
dat.source1 <- params$dat.source1
dat.source2 <- params$dat.source2
start.date <- params$start.date
end.date <- params$end.date
github_link <- params$github_link
site <- params$site
site.or.server <- params$site.or.server
run.id1 <- params$run.id1
run.id2 <- params$run.id2
gage_number <- params$gage_number
mod.phase1 <- params$mod.phase1
mod.scenario1 <- params$mod.scenario1
mod.phase2 <- params$mod.phase2
mod.scenario2 <- params$mod.scenario2
cn1 <- params$cn1
cn2 <- params$cn2
cbp6_link <- paste0(github_link, "/cbp6/code");
source(paste0(cbp6_link,"/cbp6_functions.R"))
source(paste(github_link,"auth.private", sep = "/"));#load rest username and password, contained in
source(paste(cbp6_link, "/fn_vahydro-1.0.R", sep = ''))
token <- rest_token(site, token, rest_uname, rest_pw);
options(timeout=1200); # set timeout to twice default level to avoid abort due to high traffic
if (gage_number == FALSE | is.na(gage_number) == TRUE) {
gage_number <- '00000000'
}
# LOADING DATA ------------------------------------------------------------
if (dat.source1 == 'vahydro') {
data1 <- vahydro_import_data_cfs(riv.seg, run.id1, token, site, start.date, end.date)
#cn1 <- paste0('VA Hydro ', mod.scenario1)
} else if (dat.source1 == 'gage') {
data1 <- gage_import_data_cfs(gage_number, start.date, end.date)
#cn1 <- paste0('USGS ', gage_number)
} else if (dat.source1 == 'cbp_model') {
#cn1 <- paste0('CBP ', mod.scenario1)
if (site.or.server == 'site') {
data1 <- model_import_data_cfs(riv.seg, mod.phase1, mod.scenario1, start.date, end.date)
} else if (site.or.server == 'server') {
data1 <- model_server_import_data_cfs(riv.seg, mod.phase1, mod.scenario1, start.date, end.date)
}
}
if (dat.source1 == 'vahydro') {
title.part.1 <- paste('VA Hydro Run ', run.id1, sep = '')
} else if (dat.source1 == 'gage') {
title.part.1 <- paste('USGS Gage ', gage_number, sep = '')
} else if (dat.source1 == 'cbp_model') {
title.part.1 <- paste('Scenario ', mod.scenario1, sep = '')
}
if (dat.source2 == 'vahydro') {
title.part.2 <- paste('VA Hydro Run ', run.id2, sep = '')
} else if (dat.source2 == 'gage') {
title.part.2 <- paste('USGS Gage ', gage_number, sep = '')
} else if (dat.source2 == 'cbp_model') {
title.part.2 <- paste('Scenario ', mod.scenario2, sep = '')
}
dashboard_title <- paste('River Segment ', riv.seg, ': ', title.part.1, ' vs. ', title.part.2, sep = '')
# Creating Data Frame with calculated metrics
metrics1 <- metrics_calc_all(data1)
metrics2 <- metrics_calc_all(data2)
percent_difference <- metrics_compare(metrics1, metrics2, riv.seg)
all_data <- all_data_maker(data1, data2)
# GETTING/CREATING SCENARIO PROPERTIES FROM VA HYDRO
scenprop1 <- get.scen.prop(riv.seg, mod.scenario1, dat.source1, run.id1, start.date, end.date, site, token)
scenprop2 <- get.scen.prop(riv.seg, mod.scenario2, dat.source2, run.id2, start.date, end.date, site, token)
# POSTING METRICS TO SCENARIO PROPERTIES ON VA HYDRO
vahydro_post_all_metrics_to_scenprop(scenprop1, metrics1, site, token)
vahydro_post_all_metrics_to_scenprop(scenprop2, metrics2, site, token)
View(data1)
View(data2)
which(data1$flow != 0)
which(data2$flow != 0)
which(data1$flow == 0)
library(knitr)
riv.seg <- params$riv.seg
dat.source1 <- params$dat.source1
dat.source2 <- params$dat.source2
start.date <- params$start.date
end.date <- params$end.date
github_link <- params$github_link
site <- params$site
site.or.server <- params$site.or.server
run.id1 <- params$run.id1
run.id2 <- params$run.id2
gage_number <- params$gage_number
mod.phase1 <- params$mod.phase1
mod.scenario1 <- params$mod.scenario1
mod.phase2 <- params$mod.phase2
mod.scenario2 <- params$mod.scenario2
cn1 <- params$cn1
cn2 <- params$cn2
cbp6_link <- paste0(github_link, "/cbp6/code");
source(paste0(cbp6_link,"/cbp6_functions.R"))
source(paste(github_link,"auth.private", sep = "/"));#load rest username and password, contained in
source(paste(cbp6_link, "/fn_vahydro-1.0.R", sep = ''))
token <- rest_token(site, token, rest_uname, rest_pw);
options(timeout=1200); # set timeout to twice default level to avoid abort due to high traffic
if (gage_number == FALSE | is.na(gage_number) == TRUE) {
gage_number <- '00000000'
}
# LOADING DATA ------------------------------------------------------------
if (dat.source1 == 'vahydro') {
data1 <- vahydro_import_data_cfs(riv.seg, run.id1, token, site, start.date, end.date)
#cn1 <- paste0('VA Hydro ', mod.scenario1)
} else if (dat.source1 == 'gage') {
data1 <- gage_import_data_cfs(gage_number, start.date, end.date)
#cn1 <- paste0('USGS ', gage_number)
} else if (dat.source1 == 'cbp_model') {
#cn1 <- paste0('CBP ', mod.scenario1)
if (site.or.server == 'site') {
data1 <- model_import_data_cfs(riv.seg, mod.phase1, mod.scenario1, start.date, end.date)
} else if (site.or.server == 'server') {
data1 <- model_server_import_data_cfs(riv.seg, mod.phase1, mod.scenario1, start.date, end.date)
}
}
if (dat.source2 == 'vahydro') {
data2 <- vahydro_import_data_cfs(riv.seg, run.id2, token, site, start.date, end.date)
#cn2 <- paste0('VA Hydro ', mod.scenario2)
} else if (dat.source2 == 'gage') {
data2 <- gage_import_data_cfs(gage_number, start.date, end.date)
#cn2 <- paste0('USGS ', gage_number)
} else if (dat.source2 == 'cbp_model') {
#cn2 <- paste0('CBP ', mod.scenario2)
if (site.or.server == 'site') {
data2 <- model_import_data_cfs(riv.seg, mod.phase2, mod.scenario2, start.date, end.date)
} else if (site.or.server == 'server') {
data2 <- model_server_import_data_cfs(riv.seg, mod.phase2, mod.scenario2, start.date, end.date)
}
}
# TRIMMING DATA TO PROPER WATER YEAR
data1 <- water_year_trim(data1)
data2 <- water_year_trim(data2)
which(data1$flow != 0)
library(knitr)
riv.seg <- params$riv.seg
dat.source1 <- params$dat.source1
dat.source2 <- params$dat.source2
start.date <- params$start.date
end.date <- params$end.date
github_link <- params$github_link
site <- params$site
site.or.server <- params$site.or.server
run.id1 <- params$run.id1
run.id2 <- params$run.id2
gage_number <- params$gage_number
mod.phase1 <- params$mod.phase1
mod.scenario1 <- params$mod.scenario1
mod.phase2 <- params$mod.phase2
mod.scenario2 <- params$mod.scenario2
cn1 <- params$cn1
cn2 <- params$cn2
cbp6_link <- paste0(github_link, "/cbp6/code");
source(paste0(cbp6_link,"/cbp6_functions.R"))
source(paste(github_link,"auth.private", sep = "/"));#load rest username and password, contained in
source(paste(cbp6_link, "/fn_vahydro-1.0.R", sep = ''))
token <- rest_token(site, token, rest_uname, rest_pw);
options(timeout=1200); # set timeout to twice default level to avoid abort due to high traffic
if (gage_number == FALSE | is.na(gage_number) == TRUE) {
gage_number <- '00000000'
}
# LOADING DATA ------------------------------------------------------------
if (dat.source1 == 'vahydro') {
data1 <- vahydro_import_data_cfs(riv.seg, run.id1, token, site, start.date, end.date)
#cn1 <- paste0('VA Hydro ', mod.scenario1)
} else if (dat.source1 == 'gage') {
data1 <- gage_import_data_cfs(gage_number, start.date, end.date)
#cn1 <- paste0('USGS ', gage_number)
} else if (dat.source1 == 'cbp_model') {
#cn1 <- paste0('CBP ', mod.scenario1)
if (site.or.server == 'site') {
data1 <- model_import_data_cfs(riv.seg, mod.phase1, mod.scenario1, start.date, end.date)
} else if (site.or.server == 'server') {
data1 <- model_server_import_data_cfs(riv.seg, mod.phase1, mod.scenario1, start.date, end.date)
}
}
if (dat.source2 == 'vahydro') {
data2 <- vahydro_import_data_cfs(riv.seg, run.id2, token, site, start.date, end.date)
#cn2 <- paste0('VA Hydro ', mod.scenario2)
} else if (dat.source2 == 'gage') {
data2 <- gage_import_data_cfs(gage_number, start.date, end.date)
#cn2 <- paste0('USGS ', gage_number)
} else if (dat.source2 == 'cbp_model') {
#cn2 <- paste0('CBP ', mod.scenario2)
if (site.or.server == 'site') {
data2 <- model_import_data_cfs(riv.seg, mod.phase2, mod.scenario2, start.date, end.date)
} else if (site.or.server == 'server') {
data2 <- model_server_import_data_cfs(riv.seg, mod.phase2, mod.scenario2, start.date, end.date)
}
}
View(data1)
which(data1$flow != 0)
which(data2$flow != 0)
View(data2)
library(knitr)
riv.seg <- params$riv.seg
dat.source1 <- params$dat.source1
dat.source2 <- params$dat.source2
start.date <- params$start.date
end.date <- params$end.date
github_link <- params$github_link
site <- params$site
site.or.server <- params$site.or.server
run.id1 <- params$run.id1
run.id2 <- params$run.id2
gage_number <- params$gage_number
mod.phase1 <- params$mod.phase1
mod.scenario1 <- params$mod.scenario1
mod.phase2 <- params$mod.phase2
mod.scenario2 <- params$mod.scenario2
cn1 <- params$cn1
cn2 <- params$cn2
cbp6_link <- paste0(github_link, "/cbp6/code");
source(paste0(cbp6_link,"/cbp6_functions.R"))
source(paste(github_link,"auth.private", sep = "/"));#load rest username and password, contained in
source(paste(cbp6_link, "/fn_vahydro-1.0.R", sep = ''))
token <- rest_token(site, token, rest_uname, rest_pw);
options(timeout=1200); # set timeout to twice default level to avoid abort due to high traffic
if (gage_number == FALSE | is.na(gage_number) == TRUE) {
gage_number <- '00000000'
}
# LOADING DATA ------------------------------------------------------------
if (dat.source1 == 'vahydro') {
data1 <- vahydro_import_data_cfs(riv.seg, run.id1, token, site, start.date, end.date)
#cn1 <- paste0('VA Hydro ', mod.scenario1)
} else if (dat.source1 == 'gage') {
data1 <- gage_import_data_cfs(gage_number, start.date, end.date)
#cn1 <- paste0('USGS ', gage_number)
} else if (dat.source1 == 'cbp_model') {
#cn1 <- paste0('CBP ', mod.scenario1)
if (site.or.server == 'site') {
data1 <- model_import_data_cfs(riv.seg, mod.phase1, mod.scenario1, start.date, end.date)
} else if (site.or.server == 'server') {
data1 <- model_server_import_data_cfs(riv.seg, mod.phase1, mod.scenario1, start.date, end.date)
}
}
if (dat.source2 == 'vahydro') {
data2 <- vahydro_import_data_cfs(riv.seg, run.id2, token, site, start.date, end.date)
#cn2 <- paste0('VA Hydro ', mod.scenario2)
} else if (dat.source2 == 'gage') {
data2 <- gage_import_data_cfs(gage_number, start.date, end.date)
#cn2 <- paste0('USGS ', gage_number)
} else if (dat.source2 == 'cbp_model') {
#cn2 <- paste0('CBP ', mod.scenario2)
if (site.or.server == 'site') {
data2 <- model_import_data_cfs(riv.seg, mod.phase2, mod.scenario2, start.date, end.date)
} else if (site.or.server == 'server') {
data2 <- model_server_import_data_cfs(riv.seg, mod.phase2, mod.scenario2, start.date, end.date)
}
}
# TRIMMING DATA TO PROPER WATER YEAR
data1 <- water_year_trim(data1)
data2 <- water_year_trim(data2)
which(data2$flow != 0)
which(data1$flow != 0)
mean(data2$flow)
max(data2$flow)
min(data2$flow)
med(data2$flow)
median(data2$flow)
# Creating all plots
fig1.hydrograph(all_data, cn1, cn2)
all_data <- all_data_maker(data1, data2)
# Creating all plots
fig1.hydrograph(all_data, cn1, cn2)
fig3.flow.exceedance(all_data, cn1, cn2)
# linking land-river segments
cbp6.landunits <- link.cbp6.lrseg.hydrocodes(riv.seg, psk, site, token)
# Downloading local runoff inflow data
lri.dat <- vahydro_import_local.runoff.inflows_cfs(riv.seg, run.id, token, site, start.date, end.date);
if (dat.source1 != 'vahydro') {
run.id <- run.id2
} else {
run.id <- run.id1
}
# Downloading local runoff inflow data
lri.dat <- vahydro_import_local.runoff.inflows_cfs(riv.seg, run.id, token, site, start.date, end.date);
lri.dat <- subset(lri.dat, lri.dat$date >= start.date & lri.dat$date <= end.date);
fig10.runit.boxplot(lri.dat)
View(lri.dat)
# Downloading local runoff inflow data
lri.dat <- vahydro_import_local.runoff.inflows_cfs(riv.seg, run.id, token, site, start.date, end.date);
View(lri.dat)
climate_evap.and.prcp <- function(segment, wdmpath, outpath) {
# INPUTS ----------
dsn.list <- data.frame(dsn = c('1000', '2000'), dsn.label = c('EVAP', 'PRCP'))
# READING IN AND DELETING READ-IN LAND USE DATA FROM MODEL ----------
evap.data.namer <- paste0('met_', segment, '_1000.csv')
prcp.data.namer <- paste0('prad_', segment, '_2000.csv')
evap.data <- try(read.csv(paste0(wdmpath, "/out/climate/",evap.data.namer)))
if (class(evap.data) == 'try-error') {
stop(paste0("ERROR: Missing climate .csv files (including ", wdmpath, "/out/climate/",evap.data.namer))
}
prcp.data <- try(read.csv(paste0(wdmpath, "/out/climate/",prcp.data.namer)))
if (class(prcp.data) == 'try-error') {
stop(paste0("ERROR: Missing climate .csv files (including ", wdmpath, "/out/climate/",prcp.data.namer))
}
colnames(evap.data) <- c('Year', 'Month', 'Day', 'Hour', 'evap')
colnames(prcp.data) <- c('Year', 'Month', 'Day', 'Hour', 'prcp')
evap.data$thisdate <- strptime(paste(evap.data$Year, "-", evap.data$Month, "-", evap.data$Day, ":", evap.data$Hour, sep = ""), format = "%Y-%m-%d:%H")
data.out <- data.frame(evap.data$thisdate, evap.data$evap, prcp.data$prcp)
colnames(data.out) <- c('thisdate', 'evap', 'prcp')
# Deleting read in files:
command <- paste0('rm ', wdmpath, "/out/climate/",evap.data.namer)
system(command)
command <- paste0('rm ', wdmpath, "/out/climate/",prcp.data.namer)
system(command)
overall.data.namer <- paste0(segment, '_1000-2000')
saved.file <- paste0(outpath, "/", overall.data.namer, ".csv")
write.csv(data.out, saved.file, row.names = FALSE)
return(saved.file)
}
?print
