myflowgage$CNMod$Qpred=Qpred # UPDATE vector BEFORE DETACHING
detach(myflowgage$CNMod)
detach(myflowgage)
# detach(myflowgage$TMWB)
return(myflowgage)
}
# Call the new CNModel() function with Top,Mid,BotSlope HRU objects,
# passing the Qpred into the lower HRUs ExcessIn (as area scaled flow)
TopSlopeCNSol=CNModel(TopSlope, CNavg = 90)
# Convert Qpred (mm) into Qpred_cmpd (cubic meters per day)
TopSlopeCNSol$CNMod$Qpred_cmpd=TopSlopeCNSol$CNMod$Qpred*TopSlopeCNSol$area*10^3
# Route TopSlope's Qpred into MidSlope's ExcessIn (scaling to mm/day)
MidSlope$CNMod$ExcessIn=TopSlopeCNSol$CNMod$Qpred_cmpd/TopSlopeCNSol$area/10^3
# Call the TMWBModel() function with MidSlope HRU object
MidSlopeCNSol=CNModel(MidSlope, CNavg = 95)
# Convert Qpred (mm) into Qpred_cmpd (cubic meters per day)
MidSlopeCNSol$CNMod$Qpred_cmpd=MidSlopeSol$CNMod$Qpred*MidSlopeSol$area*10^3
# Route MidSlope’s Qpred into BotSlope’s ExcessIn (scaling to mm/day)
BotSlope$CNMod$ExcessIn=MidSlopeSol$CNMod$Qpred_cmpd/MidSlopeSol$area/10^3
# Call the TMWBModel() function with BotSlope HRU object
BotSlopeSol=CNModel(BotSlope, CNavg = 100)
BotSlopeSol$CNMod$Qpred_cmpd=BotSlopeSol$CNMod$Qpred*BotSlopeSol$area*10^3
## Pasting in code for the solution to the previous lab, which we will build off of in this lab
# Cleaning up
objects()
rm(list=objects())
if (!require("pacman")) install.packages("pacman")
pacman::p_load(httr,EcoHydRology,GSODR,curl,elevatr,raster,soilDB,rgdal)
#
soildrying<-function(AWprev,dP,AWC){
AW<-AWprev*exp(dP/AWC)
excess<-0.0
c(AW,excess)
}
soil_wetting_above_capacity<-function(AWprev,dP,AWC){
AW<-AWC
excess<-AWprev+dP-AWC
c(AW,excess)
}
soilwetting<-function(AWprev,dP,AWC){
AW<-AWprev+dP
excess<-0.0
c(AW,excess)
}
# Sourcing an updated get_usgs_gage() function
url="http://bit.ly/get_usgs_gageR"
source(url)
# use the function to get data from USGS 0205551460
# LICK RUN ABOVE PATTON AVENUE AT ROANOKE, VA
myflowgage_id="0205551460"
myflowgage=get_usgs_gage(myflowgage_id,begin_date = "2015-01-01",end_date = "2018-12-31")
# We want Q in mm/day for the basin
myflowgage$flowdata$Qmm = myflowgage$flowdata$flow/myflowgage$area/10^3
# Grab closest weather stations data
wxstns=nearest_stations(myflowgage$declat,myflowgage$declon,20)
GSODdata=get_GSOD(years = c(2015,2016,2017,2018),station = wxstns)
WXdataframe=data.frame(mdate=GSODdata$YEARMODA,P=GSODdata$PRCP,
MaxTemp=GSODdata$MAX, MinTemp=GSODdata$MIN)
WXdataframe[is.na(WXdataframe)]=0 # A Quick BUT sloppy removal of NAs
#
# Merge the weather data with flow gage to use as our base HRU data structure
#
myflowgage$TMWB=merge(myflowgage$flowdata,WXdataframe)
#########START OF LAB 05###############
myflowgage$CNMod$AWC=(0.45-0.15)*400 #Fld Cap = .45, Wilt Pt = .15, z=400mm
myflowgage$CNMod$AvgTemp=(myflowgage$TMWB$MaxTemp+myflowgage$TMWB$MinTemp)/2
myflowgage$CNMod$dP = 0 # Initializing Net Precipitation
myflowgage$CNMod$ET = 0 # Initializing ET
myflowgage$CNMod$Albedo=.23
myflowgage$CNMod$PET = 0 # Initializing PET
myflowgage$CNMod$AW =  100 # Initializing AW
myflowgage$CNMod$SnowMelt_mm = 0 # Initializing Snow Melt
myflowgage$CNMod$SnowfallWatEq_mm = 0 # Initializing New Snow
myflowgage$CNMod$SnowWaterEq_mm = 0  # Initializing Snow Depth
myflowgage$CNMod$ExcessIn = 0 # Initializing Excess coming in
myflowgage$CNMod$ExcessOut = 0 # Initializing Excess going out
myflowgage$CNMod$Qpred=NA
myflowgage$CNMod$Qpred[1]=0
myflowgage$CNMod$S=NA
myflowgage$CNMod$S[1]=0
myflowgage$fcres=0.3  # Initializing here, though we adjust below
myflowgage$SlopeRad=0.0 # Initializing here, though we adjust below
# Initialized TopSlope, MidSlope, BotSlope and set area for each
TopSlope=myflowgage
TopSlope$area=myflowgage$area/3 # Adjust the area to be 1/3 the total for WS
MidSlope=myflowgage
MidSlope$area=myflowgage$area/3 # Adjust the area to be 1/3 the total for WS
BotSlope=myflowgage
BotSlope$area=myflowgage$area/3 # Adjust the area to be 1/3 the total for WS
# Previously estimated our slopes using the raster::terrain function
# BUT we will not know the aspect of HRUs until next week,
# (so slopes will not enter into radiation equations)
print(slope_sum) # Top will be a lower slope, mid higher, and bottom low
TopSlope$SlopeRad=slope_sum[2]
# Previously estimated our slopes using the raster::terrain function
# BUT we will not know the aspect of HRUs until next week,
# (so slopes will not enter into radiation equations)
slope_sum=summary(terrain(mydem, opt='slope',unit = "radians"))
#
# Grab the necessary soil and elevation spatial layers and parameters
#
url="https://prd-tnm.s3.amazonaws.com/StagedProducts/Hydrography/NHD/HU8/HighResolution/Shape/NHD_H_03010101_HU8_Shape.zip"
curl_download(url,"NHD_H_03010101_HU8_Shape.zip")
unzip("NHD_H_03010101_HU8_Shape.zip",exdir="03010101")
streams=readOGR("03010101/Shape/NHDFlowline.dbf")
mystream=subset(streams,GNIS_ID=="01478950")
plot(mystream,col="red")
mybbox=c(mystream@bbox)
mysoil = mapunit_geom_by_ll_bbox(mybbox)
mysoil1 <- readOGR("C:\Users\Kevin D'Andrea\Desktop\rstudio-export\mysoil.shp")
mysoil1 <- readOGR("C:/Users/Kevin D'Andrea/Desktop/rstudio-export/mysoil.shp")
plot(mysoil1)
install.packages(c("broom", "callr", "checkmate", "cli", "countrycode", "DEoptim", "devtools", "digest", "DT", "forcats", "foreach", "forecast", "gdalUtils", "knitr", "mime", "modelr", "plyr", "processx", "ps", "R.methodsS3", "RcppArmadillo", "remotes", "RgoogleMaps", "rlang", "rstudioapi", "sp", "stringi", "testthat", "tinytex", "vctrs"))
install.packages(c("audio", "covr", "crosstalk", "dataRetrieval", "dplyr", "fs", "ggplot2", "glue", "hydroTSM", "igraph", "lifecycle", "plyr", "quantmod", "Rcpp", "roxygen2", "shiny", "units", "vctrs", "xml2"))
pacman::p_load(data.table,httr,EcoHydRology,GSODR,curl,elevatr,raster,soilDB,
rgdal,lubridate)
#
# We are building on our prior lab solutions, need to build out our previous
# TMWB model. We will source functions from the solutions from Week 4’s Lab
#
url="https://docs.google.com/a/vt.edu/uc?authuser=0&id=1pCk6r1m08S5ltUpZDR4X3yNmjswLvyIF&export=download"
source(url)
#
# Notice we have loaded our previously built functions AND NOW TMWBModel
#
objects()
# [1] "soil_wetting_above_capacity" "soildrying"
# [3] "soilwetting"                 "TMWBModel"
#
# Inspect the model to make sure everything looks as it should to be
# used to predict Pe
#
edit(TMWBModel)
#
# Now we need to initialize and run our model for Lick Run Watershed
# Sourcing an updated get_usgs_gage() function
#
url="http://bit.ly/get_usgs_gageR"
source(url)
#
# using the function to get data from USGS 0205551460
# LICK RUN ABOVE PATTON AVENUE AT ROANOKE, VA
#
myflowgage_id="0205551460"
myflowgage=get_usgs_gage(myflowgage_id,begin_date = "2015-01-01",end_date = "2019-31-01")
#
# We want Q in mm/day for the basin
#
myflowgage$flowdata$Qmm = myflowgage$flowdata$flow/myflowgage$area/10^3
#
# Grab closest weather stations data
#
wxstns=nearest_stations(myflowgage$declat,myflowgage$declon,20)
wxstns
GSODdata=get_GSOD(years = c(2015,2016,2017,2018,2019),station = wxstns)
#
# In case of errors on this download, this data request with a subset
# download from our archive. This is due to server overload when
# 30 students hit the server at once:
#
#url="https://goo.gl/6AMVHt"
#download.file(url,destfile = "GSODdata.Rdata")
#load("GSODdata.Rdata")
#
WXdataframe=data.frame(mdate=GSODdata$YEARMODA,P=GSODdata$PRCP,
MaxTemp=GSODdata$MAX, MinTemp=GSODdata$MIN)
WXdataframe[is.na(WXdataframe)]=0 # A Quick BUT sloppy removal of NAs
#
# Merge the weather data with flow gage to use as our base HRU data structure
#
myflowgage$TMWB=merge(myflowgage$flowdata,WXdataframe)
#
#
url="https://prd-tnm.s3.amazonaws.com/StagedProducts/Hydrography/NHD/HU8/HighResolution/Shape/NHD_H_03010101_HU8_Shape.zip"
curl_download(url,"NHD_H_03010101_HU8_Shape.zip")
unzip("NHD_H_03010101_HU8_Shape.zip",exdir="03010101")
streams=readOGR("03010101/Shape/NHDFlowline.dbf")
mystream=subset(streams,GNIS_ID=="01478950")
plot(mystream,col="red")
#
# Use the spatial extents from our stream to download elevation raster.
#
mydem=get_elev_raster(mystream, z = 11, src ="aws",clip="bbox")
#
# Pretty pictures of our area help ease the frustration
#
plot(mydem)
lines(mystream,col="blue",lwd=4)
points(myflowgage$declon,myflowgage$declat,pch = 24, cex=2, col="blue", bg="red", lwd=2)
#
# For initializing slopes, we store the summary stats for terrain slope
#
slope_sum=summary(terrain(mydem, opt='slope',unit = "radians"))
#
# And of course we need to initialize our model parameters
#
#myflowgage$TMWB$AWC=(0.45-0.15)*400 #Fld Cap = .45, Wilt Pt = .15, z=400mm
myflowgage$TMWB$AvgTemp=(myflowgage$TMWB$MaxTemp+myflowgage$TMWB$MinTemp)/2
myflowgage$TMWB$dP = 0 # Initializing Net Precipitation
myflowgage$TMWB$ET = 0 # Initializing ET
myflowgage$TMWB$Albedo=.23
myflowgage$TMWB$PET = 0 # Initializing PET
myflowgage$TMWB$AW =  100 # Initializing AW
myflowgage$TMWB$SnowMelt_mm = 0 # Initializing Snow Melt
myflowgage$TMWB$SnowfallWatEq_mm = 0 # Initializing New Snow
myflowgage$TMWB$SnowWaterEq_mm = 0  # Initializing Snow Depth
myflowgage$TMWB$ExcessIn = 0 # Initializing Excess coming in
myflowgage$TMWB$ExcessOut = 0 # Initializing Excess going out
myflowgage$TMWB$Qpred=NA
myflowgage$TMWB$Qpred[1]=0
myflowgage$TMWB$S=NA
myflowgage$TMWB$S[1]=0
myflowgage$TMWB$IaFrac=NA
myflowgage$TMWB$IaFrac[1]=0
myflowgage$fcres=0.3  # Initializing here, though we adjust below
myflowgage$SlopeRad=slope_sum[3] # Initializing here, though we adjust below
myflowgage$WP=0.15 # Soil Wilting Point
myflowgage$FC=0.35 #Soil Field Capacity
myflowgage$SoilZ=100 # Soil Depth
myflowgage$TMWB$AWC=(myflowgage$FC-myflowgage$WP)*myflowgage$SoilZ
#
# And after our initialization is done, we are ready to get our estimated
# dP from our TMWB model. Remember that dP = P - ET - SnowFall + SnowMel
#
myflowgageSol=TMWBModel(myflowgage)
attach(myflowgageSol$TMWB)
plot(mdate,AW)
plot(dP,Qmm)
detach(myflowgageSol$TMWB)
#
# But, we know that our systems behave differently during snowy winter
# months, so we will isolate our June ( month>5) - October ( < 11 ) data (_JO)
#
myflowgageSol$TMWB_JO=myflowgageSol$TMWB[(month(myflowgageSol$TMWB$mdate) > 5 & month(myflowgageSol$TMWB$mdate) < 11),]
attach(myflowgageSol$TMWB_JO)
plot(dP,Qmm)
(1000/85-10)*25.4
#[1] 44.82353
(1000/50-10)*25.4
#[1] 254
#
# So we are going to visually "guestimate" that S should be somewhere between
# 45mm and 260mm… repeat plotting until your solution covers the
# largest Qmm vs dP event (upper right hand corner of plot).
#
#Assuming that (P-Ia) ~ dP, we can visually compare
plot(dP,Qmm)
points(dP,dP^2/(dP+45),col="red")
points(dP,dP^2/(dP+260),col="blue")
# Now perform a “Calibration” using our method from Lab3 and the NSE
# as the “Objective Function”.
#
# Build our NSE Function from Lab3
#
NSE=function(Yobs,Ysim){
return(1-sum((Yobs-Ysim)^2, na.rm=TRUE)/sum((Yobs-mean(Yobs, na.rm=TRUE))^2, na.rm=TRUE))
}
#
# Vary S to maximize NSE using Eq. 4 of Lyon 2004 as our predictor of Q
#   Qpred=dP^2/(dP+S)
#
NSE(Qmm,dP^2/(dP+260))
# [1] 0.2233309
NSE(Qmm,dP^2/(dP+45))
# [1] -0.7083654
#
# Keep iterating until NSE is as high as you can get for your
# best estimate to S (Sest)
#
Sest=229
plot(dP,Qmm)
points(dP,dP^2/(dP+Sest),col="red")
#
# What is the optimum value of Sest and the corresponding NSE?
#
# Compare visual based (green) with “calibration” based (red) solutions
#
# We can now take our calculated S for the watershed, and use it to
# model VSA variable source areas runoff by distributing the CN over the TI
# Classes we created last lab using the method of Easton et. al 2008 (see
# equation 9 in  https://goo.gl/Y2nyBZ )
#
#
# Here we take advantage of a library, data.table, which allows us
# to access values from lead/lag vectors through a shift() function
#
# We will split into 5 VSA areas represented by 5 TI Classes
nTIclass=5
VSAsol=data.table(WetClass=seq(from=nTIclass,to=1),
As=seq(1:nTIclass)*(1/nTIclass),Wetfrac=(1/nTIclass))
data.table::shift(VSAsol[,sSratio:=2*(sqrt(1-shift(As))-sqrt(1-As))/Wetfrac-1])
#
# Inspect what the previous command gives us, note it is just a fancy way of
# shifting the index of a vector in the VSAsol data frame using the shift()
# function.
#
VSAsol
#
# Now fill in the missing value
#
VSAsol$sSratio[1]=2*(sqrt(1-0)-sqrt(1-VSAsol$As[1]))/VSAsol$Wetfrac[1]-1
#
# Inspect to confirm all values are filled
#
VSAsol
#
# Calculate TI Class localized sigma and Curve Number
#
VSAsol[,sigma:=Sest*sSratio]
VSAsol[,CN:=25400/(sigma+254)]
VSAsol
plot(VSAsol$As,VSAsol$sigma)
lines(VSAsol$As,VSAsol$sigma)
plot(VSAsol$As,VSAsol$CN)
lines(VSAsol$As,VSAsol$CN)
mod.phase <- 'p6/p6_gb604' #or "p532c-sova" (phase 5)
mod.scenario <- 'vahydro-1.0' #or 'CBASE1808L55CY55R45P50R45P50Y' (climate change) 'CFBASE30Y20180615' (base) 'CBASE1808L55CY55R45P10R45P10Y' (climate change 10%) 'CBASE1808L55CY55R45P90R45P90Y' (climate change 90%)
start.date <- '1998-07-31' #1984-01-01
end.date <- '2014-12-31'
github_link <- "C:\\Users\\Kevin D'Andrea\\Desktop\\HARP\\Github"
site_url <- "http://deq2.bse.vt.edu/d.dh"
site.or.server <- 'site'
riv.seg <- 'YP3_6330_6700'
run.id <- '11_gage'
cbp6_link = paste0(github_link, "/cbp6/code");
setwd(cbp6_link)
# Sourcing functions
source(paste0(cbp6_link,"/cbp6_functions.R"))
source(paste0(github_link, "/auth.private"));
source(paste(cbp6_link, "/fn_vahydro-1.0.R", sep = ''))
token <- rest_token(site_url, token, rest_uname, rest_pw);
options(timeout=120); # set timeout to twice default level to avoid abort due to high traffic
token <- token
automated_metric_2_vahydro <- function(riv.seg, run.id, mod.phase, mod.scenario, start.date, end.date, github_link, site_url, site.or.server = 'site', token) {
# LOADING DATA ------------------------------------------------------------
scenprop.pid <- get.scen.prop(riv.seg, mod.scenario, dat.source = 'vahydro', run.id, start.date, end.date, site_url, token)
data <- vahydro_import_data_cfs(riv.seg, run.id, token, site_url, start.date, end.date)
data <- water_year_trim(data)
metrics <- metrics_calc_all(data) #calculate metrics into a matrix
#posts metrics to vahydro
vahydro_post_metric_to_scenprop(scenprop.pid, 'overall_mean', '', 'Overall Mean Flow', signif(metrics$overall.mean, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_low_flow', 'ml1', 'January Low Flow', signif(metrics$jan.low.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_low_flow', 'ml2', 'February Low Flow', signif(metrics$feb.low.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_low_flow', 'ml3', 'March Low Flow', signif(metrics$mar.low.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_low_flow', 'ml4', 'April Low Flow', signif(metrics$apr.low.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_low_flow', 'ml5', 'May Low Flow', signif(metrics$may.low.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_low_flow', 'ml6', 'June Low Flow', signif(metrics$jun.low.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_low_flow', 'ml7', 'July Low Flow', signif(metrics$jul.low.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_low_flow', 'ml8', 'August Low Flow', signif(metrics$aug.low.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_low_flow', 'ml9', 'September Low Flow', signif(metrics$sep.low.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_low_flow', 'ml10', 'October Low Flow', signif(metrics$oct.low.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_low_flow', 'ml11', 'November Low Flow', signif(metrics$nov.low.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_low_flow', 'ml12', 'December Low Flow', signif(metrics$dec.low.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_mean_flow', 'mm1', 'January Mean Flow', signif(metrics$jan.mean.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_mean_flow', 'mm2', 'February Mean Flow', signif(metrics$feb.mean.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_mean_flow', 'mm3', 'March Mean Flow', signif(metrics$mar.mean.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_mean_flow', 'mm4', 'April Mean Flow', signif(metrics$apr.mean.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_mean_flow', 'mm5', 'May Mean Flow', signif(metrics$may.mean.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_mean_flow', 'mm6', 'June Mean Flow', signif(metrics$jun.mean.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_mean_flow', 'mm7', 'July Mean Flow', signif(metrics$jul.mean.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_mean_flow', 'mm8', 'August Mean Flow', signif(metrics$aug.mean.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_mean_flow', 'mm9', 'September Mean Flow', signif(metrics$sep.mean.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_mean_flow', 'mm10', 'October Mean Flow', signif(metrics$oct.mean.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_mean_flow', 'mm11', 'November Mean Flow', signif(metrics$nov.mean.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_mean_flow', 'mm12', 'December Mean Flow', signif(metrics$dec.mean.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_high_flow', 'mh1', 'January High Flow', signif(metrics$jan.high.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_high_flow', 'mh2', 'February High Flow', signif(metrics$feb.high.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_high_flow', 'mh3', 'March High Flow', signif(metrics$mar.high.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_high_flow', 'mh4', 'April High Flow', signif(metrics$apr.high.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_high_flow', 'mh5', 'May High Flow', signif(metrics$may.high.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_high_flow', 'mh6', 'June High Flow', signif(metrics$jun.high.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_high_flow', 'mh7', 'July High Flow', signif(metrics$jul.high.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_high_flow', 'mh8', 'August High Flow', signif(metrics$aug.high.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_high_flow', 'mh9', 'September High Flow', signif(metrics$sep.high.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_high_flow', 'mh10', 'October High Flow', signif(metrics$oct.high.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_high_flow', 'mh11', 'November High Flow', signif(metrics$nov.high.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_high_flow', 'mh12', 'December High Flow', signif(metrics$dec.high.flow, digits =3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'min_low_flow', 'min1', '1 Day Min Low Flow', signif(metrics$one.day.min, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'min_low_flow', 'min3', '3 Day Min Low Flow', signif(metrics$three.day.min, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'min_low_flow', 'min7', '7 Day Min Low Flow', signif(metrics$seven.day.min, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'min_low_flow', 'min30', '30 Day Min Low Flow', signif(metrics$thirty.day.min, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'min_low_flow', 'min90', '90 Day Min Low Flow', signif(metrics$ninety.day.min, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'med_low_flow', 'medl1', '1 Day Median Low Flow', signif(metrics$one.day.med.min, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'med_low_flow', 'medl3', '3 Day Median Low Flow', signif(metrics$three.day.med.min, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'med_low_flow', 'medl7', '7 Day Median Low Flow', signif(metrics$seven.day.med.min, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'med_low_flow', 'medl30', '30 Day Median Low Flow', signif(metrics$thirty.day.med.min, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'med_low_flow', 'medl90', '90 Day Median Low Flow', signif(metrics$ninety.day.med.min, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'max_high_flow', 'max1', '1 Day Max High Flow', signif(metrics$one.day.max, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'max_high_flow', 'max3', '3 Day Max High Flow', signif(metrics$three.day.max, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'max_high_flow', 'max7', '7 Day Max High Flow', signif(metrics$seven.day.max, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'max_high_flow', 'max30', '30 Day Max High Flow', signif(metrics$thirty.day.max, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'max_high_flow', 'max90', '90 Day Max High Flow', signif(metrics$ninety.day.max, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'med_high_flow', 'medh1', '1 Day Median High Flow', signif(metrics$one.day.med.max, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'med_high_flow', 'medh3', '3 Day Median High Flow', signif(metrics$three.day.med.max, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'med_high_flow', 'medh7', '7 Day Median High Flow', signif(metrics$seven.day.med.max, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'med_high_flow', 'medh30', '30 Day Median High Flow', signif(metrics$thirty.day.med.max, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'med_high_flow', 'medh90', '90 Day Median High Flow', signif(metrics$ninety.day.med.max, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'non-exceedance', 'ne1', '1% Non-Exceedance Flow', signif(metrics$flow.exceedance.1, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'non-exceedance', 'ne5', '5% Non-Exceedance Flow', signif(metrics$flow.exceedance.5, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'non-exceedance', 'ne50', '50% Non-Exceedance Flow', signif(metrics$flow.exceedance.50, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'non-exceedance', 'ne95', '95% Non-Exceedance Flow', signif(metrics$flow.exceedance.95, digits =3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'non-exceedance', 'ne99', '99% Non-Exceedance Flow', signif(metrics$flow.exceedance.99, digits =3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_non-exceedance', 'mne9_10', 'September 10%', signif(metrics$sept.10.percent, digits =3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, '7q10', '', '7q10', signif(metrics$sevenQ.ten, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'dor_year', '', 'Year of Drought of Record Occurence', metrics$drought.record, site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'dor_mean', '', 'Drought of Record Year Mean Flow', signif(metrics$lowest.yearly.mean, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'baseflow', '', 'Mean Baseflow', signif(metrics$avg.baseflow, digits =3), site_url, token)
}
automated_metric_2_vahydro(riv.seg, run.id, mod.phase, mod.scenario, start.date, end.date, github_link, site_url, site.or.server = 'site', token)
# LOADING DATA ------------------------------------------------------------
scenprop.pid <- get.scen.prop(riv.seg, mod.scenario, dat.source = 'vahydro', run.id, start.date, end.date, site_url, token)
data <- vahydro_import_data_cfs(riv.seg, run.id, token, site_url, start.date, end.date)
mod.scenario <- 'runid_11_gage' #or 'CBASE1808L55CY55R45P50R45P50Y' (climate change) 'CFBASE30Y20180615' (base) 'CBASE1808L55CY55R45P10R45P10Y' (climate change 10%) 'CBASE1808L55CY55R45P90R45P90Y' (climate change 90%)
run.id <- '11'
# LOADING DATA ------------------------------------------------------------
scenprop.pid <- get.scen.prop(riv.seg, mod.scenario, dat.source = 'vahydro', run.id, start.date, end.date, site_url, token)
data <- vahydro_import_data_cfs(riv.seg, run.id, token, site_url, start.date, end.date)
data <- water_year_trim(data)
metrics <- metrics_calc_all(data) #calculate metrics into a matrix
vahydro_post_metric_to_scenprop(scenprop.pid, 'overall_mean', '', 'Overall Mean Flow', signif(metrics$overall.mean, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_low_flow', 'ml1', 'January Low Flow', signif(metrics$jan.low.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_low_flow', 'ml2', 'February Low Flow', signif(metrics$feb.low.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_low_flow', 'ml3', 'March Low Flow', signif(metrics$mar.low.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_low_flow', 'ml4', 'April Low Flow', signif(metrics$apr.low.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_low_flow', 'ml5', 'May Low Flow', signif(metrics$may.low.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_low_flow', 'ml6', 'June Low Flow', signif(metrics$jun.low.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_low_flow', 'ml7', 'July Low Flow', signif(metrics$jul.low.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_low_flow', 'ml8', 'August Low Flow', signif(metrics$aug.low.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_low_flow', 'ml9', 'September Low Flow', signif(metrics$sep.low.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_low_flow', 'ml10', 'October Low Flow', signif(metrics$oct.low.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_low_flow', 'ml11', 'November Low Flow', signif(metrics$nov.low.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_low_flow', 'ml12', 'December Low Flow', signif(metrics$dec.low.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_mean_flow', 'mm1', 'January Mean Flow', signif(metrics$jan.mean.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_mean_flow', 'mm2', 'February Mean Flow', signif(metrics$feb.mean.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_mean_flow', 'mm3', 'March Mean Flow', signif(metrics$mar.mean.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_mean_flow', 'mm4', 'April Mean Flow', signif(metrics$apr.mean.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_mean_flow', 'mm5', 'May Mean Flow', signif(metrics$may.mean.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_mean_flow', 'mm6', 'June Mean Flow', signif(metrics$jun.mean.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_mean_flow', 'mm7', 'July Mean Flow', signif(metrics$jul.mean.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_mean_flow', 'mm8', 'August Mean Flow', signif(metrics$aug.mean.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_mean_flow', 'mm9', 'September Mean Flow', signif(metrics$sep.mean.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_mean_flow', 'mm10', 'October Mean Flow', signif(metrics$oct.mean.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_mean_flow', 'mm11', 'November Mean Flow', signif(metrics$nov.mean.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_mean_flow', 'mm12', 'December Mean Flow', signif(metrics$dec.mean.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_high_flow', 'mh1', 'January High Flow', signif(metrics$jan.high.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_high_flow', 'mh2', 'February High Flow', signif(metrics$feb.high.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_high_flow', 'mh3', 'March High Flow', signif(metrics$mar.high.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_high_flow', 'mh4', 'April High Flow', signif(metrics$apr.high.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_high_flow', 'mh5', 'May High Flow', signif(metrics$may.high.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_high_flow', 'mh6', 'June High Flow', signif(metrics$jun.high.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_high_flow', 'mh7', 'July High Flow', signif(metrics$jul.high.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_high_flow', 'mh8', 'August High Flow', signif(metrics$aug.high.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_high_flow', 'mh9', 'September High Flow', signif(metrics$sep.high.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_high_flow', 'mh10', 'October High Flow', signif(metrics$oct.high.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_high_flow', 'mh11', 'November High Flow', signif(metrics$nov.high.flow, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_high_flow', 'mh12', 'December High Flow', signif(metrics$dec.high.flow, digits =3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'min_low_flow', 'min1', '1 Day Min Low Flow', signif(metrics$one.day.min, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'min_low_flow', 'min3', '3 Day Min Low Flow', signif(metrics$three.day.min, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'min_low_flow', 'min7', '7 Day Min Low Flow', signif(metrics$seven.day.min, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'min_low_flow', 'min30', '30 Day Min Low Flow', signif(metrics$thirty.day.min, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'min_low_flow', 'min90', '90 Day Min Low Flow', signif(metrics$ninety.day.min, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'med_low_flow', 'medl1', '1 Day Median Low Flow', signif(metrics$one.day.med.min, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'med_low_flow', 'medl3', '3 Day Median Low Flow', signif(metrics$three.day.med.min, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'med_low_flow', 'medl7', '7 Day Median Low Flow', signif(metrics$seven.day.med.min, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'med_low_flow', 'medl30', '30 Day Median Low Flow', signif(metrics$thirty.day.med.min, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'med_low_flow', 'medl90', '90 Day Median Low Flow', signif(metrics$ninety.day.med.min, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'max_high_flow', 'max1', '1 Day Max High Flow', signif(metrics$one.day.max, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'max_high_flow', 'max3', '3 Day Max High Flow', signif(metrics$three.day.max, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'max_high_flow', 'max7', '7 Day Max High Flow', signif(metrics$seven.day.max, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'max_high_flow', 'max30', '30 Day Max High Flow', signif(metrics$thirty.day.max, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'max_high_flow', 'max90', '90 Day Max High Flow', signif(metrics$ninety.day.max, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'med_high_flow', 'medh1', '1 Day Median High Flow', signif(metrics$one.day.med.max, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'med_high_flow', 'medh3', '3 Day Median High Flow', signif(metrics$three.day.med.max, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'med_high_flow', 'medh7', '7 Day Median High Flow', signif(metrics$seven.day.med.max, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'med_high_flow', 'medh30', '30 Day Median High Flow', signif(metrics$thirty.day.med.max, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'med_high_flow', 'medh90', '90 Day Median High Flow', signif(metrics$ninety.day.med.max, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'non-exceedance', 'ne1', '1% Non-Exceedance Flow', signif(metrics$flow.exceedance.1, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'non-exceedance', 'ne5', '5% Non-Exceedance Flow', signif(metrics$flow.exceedance.5, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'non-exceedance', 'ne50', '50% Non-Exceedance Flow', signif(metrics$flow.exceedance.50, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'non-exceedance', 'ne95', '95% Non-Exceedance Flow', signif(metrics$flow.exceedance.95, digits =3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'non-exceedance', 'ne99', '99% Non-Exceedance Flow', signif(metrics$flow.exceedance.99, digits =3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'monthly_non-exceedance', 'mne9_10', 'September 10%', signif(metrics$sept.10.percent, digits =3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, '7q10', '', '7q10', signif(metrics$sevenQ.ten, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'dor_year', '', 'Year of Drought of Record Occurence', metrics$drought.record, site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'dor_mean', '', 'Drought of Record Year Mean Flow', signif(metrics$lowest.yearly.mean, digits = 3), site_url, token)
vahydro_post_metric_to_scenprop(scenprop.pid, 'baseflow', '', 'Mean Baseflow', signif(metrics$avg.baseflow, digits =3), site_url, token)
}
for (i in length(riv.seg.list)) {
riv.seg <- riv.seg.list[i]
automated_metric_2_vahydro(riv.seg, run.id, mod.phase, mod.scenario, start.date, end.date, github_link, site_url, site.or.server = 'site', token)
automated_metric_2_vahydro(riv.seg, run.id, mod.phase, mod.scenario, start.date, end.date, github_link, site_url, site.or.server = 'site', token)
mod.phase <- 'p6/p6_gb604' #or "p532c-sova" (phase 5)
mod.scenario <- 'vahydro-1.0' #or 'CBASE1808L55CY55R45P50R45P50Y' (climate change) 'CFBASE30Y20180615' (base) 'CBASE1808L55CY55R45P10R45P10Y' (climate change 10%) 'CBASE1808L55CY55R45P90R45P90Y' (climate change 90%)
start.date <- '1998-07-31' #1984-01-01
end.date <- '2014-12-31'
github_link <- "C:\\Users\\Kevin D'Andrea\\Desktop\\HARP\\Github"
site_url <- "http://deq2.bse.vt.edu/d.dh"
site.or.server <- 'site'
riv.seg <- 'YP3_6330_6700'
run.id <- '11_gage'
automated_metric_2_vahydro(riv.seg, run.id, mod.phase, mod.scenario, start.date, end.date, github_link, site_url, site.or.server = 'site', token)
automated_metric_2_vahydro(riv.seg, run.id, mod.phase, mod.scenario, start.date, end.date, github_link, site_url, site.or.server = 'site', token)
mod.phase <- 'p6/p6_gb604' #or "p532c-sova" (phase 5)
mod.scenario <- 'vahydro-1.0-gage timespan' #or 'CBASE1808L55CY55R45P50R45P50Y' (climate change) 'CFBASE30Y20180615' (base) 'CBASE1808L55CY55R45P10R45P10Y' (climate change 10%) 'CBASE1808L55CY55R45P90R45P90Y' (climate change 90%)
start.date <- '1998-07-31' #1984-01-01
end.date <- '2014-12-31'
github_link <- "C:\\Users\\Kevin D'Andrea\\Desktop\\HARP\\Github"
site_url <- "http://deq2.bse.vt.edu/d.dh"
site.or.server <- 'site'
riv.seg <- 'YP3_6330_6700'
run.id <- '11'
automated_metric_2_vahydro(riv.seg, run.id, mod.phase, mod.scenario, start.date, end.date, github_link, site_url, site.or.server = 'site', token)
