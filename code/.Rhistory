# Put a control on what date the script advances by - if end date is not 11-30, reset it
# - if begin date is not -10-01, reset it
YearBeginyear <- year(YearStart)  # pull year of beginning year
YearBeginCheck <- as.Date(paste0(YearBeginyear,'-10-01'))
if (YearBeginyear != YearBeginCheck)
YearStart <- as.Date(paste0(YearBeginyear,'-10-01'))
YearEndyear <- year(YearEnd)  # pull year of ending year
YearEndCheck <- as.Date(paste0(YearEndyear,'-11-30'))
if (YearEnd != YearEndCheck)
YearEnd <- as.Date(paste0(YearEndyear,'-11-30'))
YearStart_Row <- which(as.Date(all_data$Date)== as.Date(YearStart))
YearEnd_Row <- which(as.Date(all_data$Date) == as.Date(YearEnd))
i <- i + 1
}
# This section of code will plot timeframes with high difference.
# count the number of 3 month periods over 20% difference, plot the highest 3 periods.
Timespan_Difference$Logic <- Timespan_Difference$Difference>=20 | Timespan_Difference$Difference<= -20
over20 <- Timespan_Difference[Timespan_Difference$Logic=='TRUE',]
HighDifference <- Timespan_Difference[order(abs(Timespan_Difference$Difference), decreasing = TRUE),]
names(HighDifference)<-c('Difference', 'Date', 'Logic')
# pull data for each of these 3 month segments.
HighestDifferences <- HighDifference[1:3,]
HighestDifferences$Date <- as.Date(HighestDifferences$Date)
# initalize variables for loop
differenceyear <- data.frame(matrix(nrow=1,ncol=6))
differencedates <- data.frame(matrix(nrow=1, ncol=2))
names(differenceyear)<- c('endyear', 'endmonth', 'enddate', 'startyear', 'startmonth', 'startdate')
names(differencedates)<- c('start date row', 'end date row')
storeplotdata1<- data.frame(matrix(nrow=1, ncol=4))
names(storeplotdata1)<- c('Date', 'Scenario 1 Flow', 'Scenario 2 Flow', 'Counter')
storeplotdata2<- data.frame(matrix(nrow=1, ncol=4))
names(storeplotdata2)<- c('Date', 'Scenario 1 Flow', 'Scenario 2 Flow', 'Counter')
storeplotdata3<- data.frame(matrix(nrow=1, ncol=4))
names(storeplotdata3)<- c('Date', 'Scenario 1 Flow', 'Scenario 2 Flow', 'Counter')
q <- 1
for (q in 1:length(HighestDifferences)){
differenceyear[q,1] <- year(HighestDifferences$Date[q])  # ending year
differenceyear[q,2]<- month(HighestDifferences$Date[q]) + 1 # ending month
differenceyear[q,4]<- year(HighestDifferences$Date[q]) #startyear
differenceyear[q,5]<- month(HighestDifferences$Date[q])-2 #startmonth
if (differenceyear[q,2] > 12) { # if end month is jan, must move year up
differenceyear[q,4] <- differenceyear[q,1]
differenceyear[q,1]<- differenceyear[q,1] + 1 # year for jan moves
differenceyear[q,2] <- 1
}else if (differenceyear[q,5] == -1) {
differenceyear[q,4] <- differenceyear[q,4] - 1 # if january, go back a year and start november
differenceyear[q,5] <- 11
}else if (differenceyear[q,5] == 0) {
differenceyear[q,4] <- differenceyear[q,4] - 1 # if january, go back a year and start november
differenceyear[q,5] <- 12
} else{
differenceyear[q,1]<- differenceyear[q,1]  #endyear
differenceyear[q,2]<- differenceyear[q,2]  #endmonth
differenceyear[q,4]<- differenceyear[q,4]  #startyear
differenceyear[q,5]<- differenceyear[q,5]  #startmonth
}
differenceyear[q,3]<- paste0(differenceyear[q,1], '-',differenceyear[q,2], '-01') #enddate
differenceyear$enddate <- as.Date(differenceyear$enddate)
differenceyear[q,6]<- as.Date(paste0(differenceyear[q,4], '-', differenceyear[q,5], '-01')) #startdate
differenceyear$startdate <- as.Date(differenceyear$startdate)
differencedates[q,1]<- as.character(differenceyear$startdate[q])
differencedates[q,2]<- as.character(differenceyear$enddate[q]-1)
differencedates[q,3]<- which(as.Date(all_data$Date)==as.Date(differencedates$`start date row`[q]))
differencedates[q,4]<- which(as.Date(all_data$Date)==as.Date(differencedates$`end date row`[q]))
plot1<-all_data[differencedates$V3[q]:differencedates$V4[q],]
if (q==1){
storeplotdata1<- plot1
}else if(q==2){
storeplotdata2<- plot1
}else if(q==3){
storeplotdata3<- plot1
}
q <- q+1
}
# # create and export 3 plots: \plot for info of row q
difference1 <- signif(HighestDifferences$Difference[1], digits=3)     #Create difference variable to display on graph
difference2 <- signif(HighestDifferences$Difference[2], digits=3)
difference3 <- signif(HighestDifferences$Difference[3], digits=3)
# CREATES OUTPUT MATRIX -------------------------------------------------------
avg_scenario1 <- mean(data1$flow)
avg_scenario2 <- mean(data2$flow)
# also want to list the number of timespans that were over 20% difference.
over20 <- signif(nrow(over20)/nrow(Timespan_Difference)*100, digits=3)
OUTPUT_MATRIX <- matrix(c(avg_scenario1, avg_scenario2, over20), nrow=1, ncol=3)
rownames(OUTPUT_MATRIX) = c("Flow")
colnames(OUTPUT_MATRIX) = c('Scenario 1', 'Scenario 2', 'Difference>20 (%)')
overall_difference <- signif((OUTPUT_MATRIX[1,1]-OUTPUT_MATRIX[1,2])/OUTPUT_MATRIX[1,1]*100, digits=3)
OUTPUT_MATRIX <- matrix(c(over20, percent_difference[3,]), nrow=1, ncol=2)
rownames(OUTPUT_MATRIX) = c("Percent")
colnames(OUTPUT_MATRIX) = c('Difference > 20%', 'Overall Difference')
OUTPUT_MATRIX <- signif(as.numeric(OUTPUT_MATRIX, digits = 2))
OUTPUT_MATRIXsaver <- OUTPUT_MATRIX
?paste
?is.character
?readline
?add_headers
??add_headers
?content
??content
# Loading Necessary Packages
library(dataRetrieval)
library(lubridate)
library(plyr)
library(zoo)
library(knitr)
library(ggplot2)
library(stats)
library(lfstat)
library(rstudioapi)
library(IHA)
library(PearsonDS)
library(lfstat)
library(scales)
library(readr)
library(httr)
library(dplyr)
library(stringr)
library(RCurl)
library(rgeos)
library(ggmap)
library(ggsn)
library(sp)
library(rlist)
riv.seg <- 'DE0_3791_0001_0111'
mod.phase1 <- 'p6/p6_gb604' #or "p532c-sova" (phase 5)
mod.scenario1 <- 'CFBASE30Y20180615' #or "p532cal_062211" (phase 5)
mod.phase2 <- 'p6/p6_gb604' #or "p532c-sova" (phase 5)
mod.scenario2 <- 'CBASE1808L55CY55R45P50R45P50Y' #or "p532cal_062211" (phase 5)
start.date <- '1984-01-01'
end.date <- '2000-12-31'
site_number <- '01483700'
cbp6_link <- "C:\\Users\\Kevin D'Andrea\\Desktop\\HARP\\Github\\cbp6\\code";
site_url <- "http://deq2.bse.vt.edu/d.dh"
area <- readNWISsite(site_number);
area <- area$`drain_area_va` #sq. miles
area <- area*27878400 #sq ft
container1 ="C:\\Users\\Kevin D'Andrea\\Desktop\\HARP\\Github";
container2 = "C:\\Users\\Kevin D'Andrea\\Desktop\\HARP\\Github\\cbp6\\code";
# Sourcing functions
source(paste0(container2,"/cbp6_functions.R"))
# Should new or original data be used?
new.or.original <- "new"
# CARRYOVER IF MASTER IS BEING RUN ----------------------------------------
if (exists("container.master") == TRUE) {
container1 <- container.master
riv.seg <- riv.seg.master
new.or.original <- new.or.original.master
}
data1 <- model_import_data_cfs(riv.seg, mod.phase1, mod.scenario1, start.date, end.date)
# Loading Necessary Packages
library(dataRetrieval)
library(lubridate)
library(plyr)
library(zoo)
library(knitr)
library(ggplot2)
library(stats)
library(lfstat)
library(rstudioapi)
library(IHA)
library(PearsonDS)
library(lfstat)
library(scales)
library(readr)
library(httr)
library(dplyr)
library(stringr)
library(RCurl)
library(rgeos)
library(ggmap)
library(ggsn)
library(sp)
library(rlist)
# INPUTS
riv.seg <- 'EL0_4560_4562'
mod.phase1 <- 'p6/p6_gb604' #or "p532c-sova" (phase 5)
mod.scenario1 <- 'CFBASE30Y20180615' #or "p532cal_062211" (phase 5)
mod.phase2 <- 'p6/p6_gb604' #or "p532c-sova" (phase 5)
mod.scenario2 <- 'CBASE1808L55CY55R45P50R45P50Y' #or "p532cal_062211" (phase 5)
start.date <- '1984-01-01'
end.date <- '2000-12-31'
site_number <- '01487000'
cbp6_link <- "C:\\Users\\Kevin D'Andrea\\Desktop\\HARP\\Github\\cbp6\\code";
site_url <- "http://deq2.bse.vt.edu/d.dh"
area <- readNWISsite(site_number);
area <- area$`drain_area_va` #sq. miles
area <- area*27878400 #sq ft
# SETUP
# SETUP
# Setting active directory
# Setting working directory to the source file location
container1 ="C:\\Users\\Kevin D'Andrea\\Desktop\\HARP\\Github";
container2 = "C:\\Users\\Kevin D'Andrea\\Desktop\\HARP\\Github\\cbp6\\code";
# Sourcing functions
source(paste0(container2,"/cbp6_functions.R"))
# Should new or original data be used?
new.or.original <- "new"
# CARRYOVER IF MASTER IS BEING RUN ----------------------------------------
if (exists("container.master") == TRUE) {
container1 <- container.master
riv.seg <- riv.seg.master
new.or.original <- new.or.original.master
}
data1 <- model_import_data_cfs(riv.seg, mod.phase1, mod.scenario1, start.date, end.date)
data2 <- model_import_data_cfs(riv.seg, mod.phase2, mod.scenario2, start.date, end.date)
data1 <- water_year_trim(data1)
data2 <- water_year_trim(data2)
#retrieve rest token
source(paste0(container1, "/auth.private"));
token <- rest_token(site_url, token, rest_uname, rest_pw);
options(timeout=120); # set timeout to twice default level to avoid abort due to high traffic
# Loading written gage description
description <- read_file(paste0(cbp6_link, "/gage_descriptions/", site_number, ".txt"))
# Generating gage location maps
gis_img <- fn_gage_and_seg_mapper(riv.seg, site_number, site_url, cbp6_link)
# Loading Necessary Packages
library(dataRetrieval)
# Loading Necessary Packages
library(dataRetrieval)
library(lubridate)
library(plyr)
library(lubridate)
library(plyr)
library(zoo)
# Loading Necessary Packages
library(dataRetrieval)
library(lubridate)
library(plyr)
library(zoo)
library(knitr)
library(stats)
library(stats)
library(lfstat)
library(IHA)
library(PearsonDS)
library(lfstat)
library(scales)
library(readr)
library(readr)
library(httr)
library(stringr)
library(RCurl)
library(rgeos)
library(ggsn)
library(ggsn)
library(sp)
library(rlist)
mod.phase <- 'p6/p6_gb604' #or "p532c-sova" (phase 5)
mod.scenario <- 'CBASE1808L55CY55R45P50R45P50Y' #or 'CBASE1808L55CY55R45P50R45P50Y' (climate change) 'CFBASE30Y20180615' (base)
start.date <- '1984-01-01'
end.date <- '2000-12-31'
github_link <- "C:\\Users\\Kevin D'Andrea\\Desktop\\HARP\\Github"
site_url <- "http://deq2.bse.vt.edu/d.bet"
site.or.server <- 'site'
source(paste0(github_link, "/auth.private"));
cbp6_link = paste0(github_link, "/cbp6/code");
setwd(cbp6_link)
metr.output.dir <- paste0('/opt/model/p6/p6_gb604/out/metrics')
# Sourcing functions
source(paste0(cbp6_link,"/cbp6_functions.R"))
token <- rest_token(site_url, token, rest_uname, rest_pw);
options(timeout=120); # set timeout to twice default level to avoid abort due to high traffic
automated_metric_2_vahydro <- function(mod.phase, mod.scenario, start.date, end.date, github_link, site_url, site.or.server = 'site', token) {
token <- token
cbp6_link = paste0(github_link, "/cbp6/code");
setwd(cbp6_link)
metr.output.dir <- paste0('/opt/model/p6/p6_gb604/out/metrics')
# Sourcing functions
source(paste0(cbp6_link,"/cbp6_functions.R"))
info <- read.csv(paste0(cbp6_link, "/data.csv"))
counter <- 1
while (counter <= length(info$riv.seg)) {
riv.seg <- as.character(info[counter,1]) #input for model data import
# LOADING DATA ------------------------------------------------------------
if (site.or.server == 'site') {
data <- model_import_data_cfs(riv.seg, mod.phase, mod.scenario, start.date, end.date)
} else if (site.or.server == 'server') {
data <- model_server_import_data_cfs(riv.seg, mod.phase, mod.scenario, start.date, end.date)
}
data <- water_year_trim(data)
metrics <- metrics_calc_all(data) #calculate metrics into a matrix
#posts metrics to vahydro
vahydro_post_metric('overall_mean', '', 'Overall Mean Flow', signif(metrics$overall.mean, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_low_flow', 'ml1', 'January Low Flow', signif(metrics$jan.low.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_low_flow', 'ml2', 'February Low Flow', signif(metrics$feb.low.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_low_flow', 'ml3', 'March Low Flow', signif(metrics$mar.low.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_low_flow', 'ml4', 'April Low Flow', signif(metrics$apr.low.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_low_flow', 'ml5', 'May Low Flow', signif(metrics$may.low.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_low_flow', 'ml6', 'June Low Flow', signif(metrics$jun.low.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_low_flow', 'ml7', 'July Low Flow', signif(metrics$jul.low.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_low_flow', 'ml8', 'August Low Flow', signif(metrics$aug.low.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_low_flow', 'ml9', 'September Low Flow', signif(metrics$sep.low.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_low_flow', 'ml10', 'October Low Flow', signif(metrics$oct.low.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_low_flow', 'ml11', 'November Low Flow', signif(metrics$nov.low.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_low_flow', 'ml12', 'December Low Flow', signif(metrics$dec.low.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_mean_flow', 'mm1', 'January Mean Flow', signif(metrics$jan.mean.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_mean_flow', 'mm2', 'February Mean Flow', signif(metrics$feb.mean.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_mean_flow', 'mm3', 'March Mean Flow', signif(metrics$mar.mean.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_mean_flow', 'mm4', 'April Mean Flow', signif(metrics$apr.mean.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_mean_flow', 'mm5', 'May Mean Flow', signif(metrics$may.mean.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_mean_flow', 'mm6', 'June Mean Flow', signif(metrics$jun.mean.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_mean_flow', 'mm7', 'July Mean Flow', signif(metrics$jul.mean.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_mean_flow', 'mm8', 'August Mean Flow', signif(metrics$aug.mean.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_mean_flow', 'mm9', 'September Mean Flow', signif(metrics$sep.mean.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_mean_flow', 'mm10', 'October Mean Flow', signif(metrics$oct.mean.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_mean_flow', 'mm11', 'November Mean Flow', signif(metrics$nov.mean.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_mean_flow', 'mm12', 'December Mean Flow', signif(metrics$dec.mean.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_high_flow', 'mh1', 'January High Flow', signif(metrics$jan.high.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_high_flow', 'mh2', 'February High Flow', signif(metrics$feb.high.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_high_flow', 'mh3', 'March High Flow', signif(metrics$mar.high.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_high_flow', 'mh4', 'April High Flow', signif(metrics$apr.high.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_high_flow', 'mh5', 'May High Flow', signif(metrics$may.high.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_high_flow', 'mh6', 'June High Flow', signif(metrics$jun.high.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_high_flow', 'mh7', 'July High Flow', signif(metrics$jul.high.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_high_flow', 'mh8', 'August High Flow', signif(metrics$aug.high.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_high_flow', 'mh9', 'September High Flow', signif(metrics$sep.high.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_high_flow', 'mh10', 'October High Flow', signif(metrics$oct.high.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_high_flow', 'mh11', 'November High Flow', signif(metrics$nov.high.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_high_flow', 'mh12', 'December High Flow', signif(metrics$dec.high.flow, digits =3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('min_low_flow', 'min1', '1 Day Min Low Flow', signif(metrics$one.day.min, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('min_low_flow', 'min3', '3 Day Min Low Flow', signif(metrics$three.day.min, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('min_low_flow', 'min7', '7 Day Min Low Flow', signif(metrics$seven.day.min, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('min_low_flow', 'min30', '30 Day Min Low Flow', signif(metrics$thirty.day.min, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('min_low_flow', 'min90', '90 Day Min Low Flow', signif(metrics$ninety.day.min, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('med_low_flow', 'medl1', '1 Day Median Low Flow', signif(metrics$one.day.med.min, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('med_low_flow', 'medl3', '3 Day Median Low Flow', signif(metrics$three.day.med.min, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('med_low_flow', 'medl7', '7 Day Median Low Flow', signif(metrics$seven.day.med.min, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('med_low_flow', 'medl30', '30 Day Median Low Flow', signif(metrics$thirty.day.med.min, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('med_low_flow', 'medl90', '90 Day Median Low Flow', signif(metrics$ninety.day.med.min, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('max_high_flow', 'max1', '1 Day Max High Flow', signif(metrics$one.day.max, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('max_high_flow', 'max3', '3 Day Max High Flow', signif(metrics$three.day.max, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('max_high_flow', 'max7', '7 Day Max High Flow', signif(metrics$seven.day.max, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('max_high_flow', 'max30', '30 Day Max High Flow', signif(metrics$thirty.day.max, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('max_high_flow', 'max90', '90 Day Max High Flow', signif(metrics$ninety.day.max, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('med_high_flow', 'medh1', '1 Day Median High Flow', signif(metrics$one.day.med.max, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('med_high_flow', 'medh3', '3 Day Median High Flow', signif(metrics$three.day.med.max, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('med_high_flow', 'medh7', '7 Day Median High Flow', signif(metrics$seven.day.med.max, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('med_high_flow', 'medh30', '30 Day Median High Flow', signif(metrics$thirty.day.med.max, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('med_high_flow', 'medh90', '90 Day Median High Flow', signif(metrics$ninety.day.med.max, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('non-exceedance', 'ne1', '1% Non-Exceedance Flow', signif(metrics$flow.exceedance.1, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('non-exceedance', 'ne5', '5% Non-Exceedance Flow', signif(metrics$flow.exceedance.5, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('non-exceedance', 'ne50', '50% Non-Exceedance Flow', signif(metrics$flow.exceedance.50, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('non-exceedance', 'ne95', '95% Non-Exceedance Flow', signif(metrics$flow.exceedance.95, digits =3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('non-exceedance', 'ne99', '99% Non-Exceedance Flow', signif(metrics$flow.exceedance.99, digits =3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_non-exceedance', 'mne9_10', 'September 10%', signif(metrics$sept.10.percent, digits =3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('7q10', '', '7q10', signif(metrics$sevenQ.ten, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('dor_year', '', 'Year of Drought of Record Occurence', metrics$drought.record, riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('dor_mean', '', 'Drought of Record Year Mean Flow', signif(metrics$lowest.yearly.mean, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('baseflow', '', 'Mean Baseflow', signif(metrics$avg.baseflow, digits =3), riv.seg, mod.scenario, token, site_url)
counter <- counter + 1
}
}
automated_metric_2_vahydro('p6/p6_gb604', 'CBASE1808L55CY55R45P50R45P50Y', '1984-01-01', '2000-12-31', "C:\\Users\\Kevin D'Andrea\\Desktop\\HARP\\Github", "http://deq2.bse.vt.edu/d.bet", 'site', token)
automated_metric_2_vahydro('p6/p6_gb604', 'CBASE1808L55CY55R45P50R45P50Y', '1984-01-01', '2000-12-31', "C:\\Users\\Kevin D'Andrea\\Desktop\\HARP\\Github", "http://deq2.bse.vt.edu/d.bet", 'site', token)
counter <- 25
automated_metric_2_vahydro('p6/p6_gb604', 'CBASE1808L55CY55R45P50R45P50Y', '1984-01-01', '2000-12-31', "C:\\Users\\Kevin D'Andrea\\Desktop\\HARP\\Github", "http://deq2.bse.vt.edu/d.bet", 'site', token)
# Loading Necessary Packages
library(dataRetrieval)
library(plyr)
library(knitr)
library(ggplot2)
library(stats)
library(lfstat)
library(rstudioapi)
library(IHA)
library(PearsonDS)
library(lfstat)
library(scales)
library(readr)
library(httr)
library(dplyr)
library(RCurl)
library(rgeos)
library(ggmap)
library(sp)
library(rlist)
library(tinytex)
mod.phase <- 'p6/p6_gb604' #or "p532c-sova" (phase 5)
mod.scenario <- 'CBASE1808L55CY55R45P50R45P50Y' #or 'CBASE1808L55CY55R45P50R45P50Y' (climate change) 'CFBASE30Y20180615' (base)
start.date <- '1984-01-01'
end.date <- '2000-12-31'
github_link <- "C:\\Users\\Kevin D'Andrea\\Desktop\\HARP\\Github"
site_url <- "http://deq2.bse.vt.edu/d.bet"
site.or.server <- 'site'
source(paste0(github_link, "/auth.private"));
cbp6_link = paste0(github_link, "/cbp6/code");
setwd(cbp6_link)
metr.output.dir <- paste0('/opt/model/p6/p6_gb604/out/metrics')
# Sourcing functions
source(paste0(cbp6_link,"/cbp6_functions.R"))
counter <- 24
token <- rest_token(site_url, token, rest_uname, rest_pw);
options(timeout=120); # set timeout to twice default level to avoid abort due to high traffic
automated_metric_2_vahydro <- function(mod.phase, mod.scenario, start.date, end.date, github_link, site_url, site.or.server = 'site', token) {
token <- token
cbp6_link = paste0(github_link, "/cbp6/code");
setwd(cbp6_link)
metr.output.dir <- paste0('/opt/model/p6/p6_gb604/out/metrics')
# Sourcing functions
source(paste0(cbp6_link,"/cbp6_functions.R"))
info <- read.csv(paste0(cbp6_link, "/data.csv"))
counter <- 24
while (counter <= length(info$riv.seg)) {
riv.seg <- as.character(info[counter,1]) #input for model data import
# LOADING DATA ------------------------------------------------------------
if (site.or.server == 'site') {
data <- model_import_data_cfs(riv.seg, mod.phase, mod.scenario, start.date, end.date)
} else if (site.or.server == 'server') {
data <- model_server_import_data_cfs(riv.seg, mod.phase, mod.scenario, start.date, end.date)
}
data <- water_year_trim(data)
metrics <- metrics_calc_all(data) #calculate metrics into a matrix
#posts metrics to vahydro
vahydro_post_metric('overall_mean', '', 'Overall Mean Flow', signif(metrics$overall.mean, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_low_flow', 'ml1', 'January Low Flow', signif(metrics$jan.low.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_low_flow', 'ml2', 'February Low Flow', signif(metrics$feb.low.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_low_flow', 'ml3', 'March Low Flow', signif(metrics$mar.low.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_low_flow', 'ml4', 'April Low Flow', signif(metrics$apr.low.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_low_flow', 'ml5', 'May Low Flow', signif(metrics$may.low.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_low_flow', 'ml6', 'June Low Flow', signif(metrics$jun.low.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_low_flow', 'ml7', 'July Low Flow', signif(metrics$jul.low.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_low_flow', 'ml8', 'August Low Flow', signif(metrics$aug.low.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_low_flow', 'ml9', 'September Low Flow', signif(metrics$sep.low.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_low_flow', 'ml10', 'October Low Flow', signif(metrics$oct.low.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_low_flow', 'ml11', 'November Low Flow', signif(metrics$nov.low.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_low_flow', 'ml12', 'December Low Flow', signif(metrics$dec.low.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_mean_flow', 'mm1', 'January Mean Flow', signif(metrics$jan.mean.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_mean_flow', 'mm2', 'February Mean Flow', signif(metrics$feb.mean.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_mean_flow', 'mm3', 'March Mean Flow', signif(metrics$mar.mean.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_mean_flow', 'mm4', 'April Mean Flow', signif(metrics$apr.mean.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_mean_flow', 'mm5', 'May Mean Flow', signif(metrics$may.mean.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_mean_flow', 'mm6', 'June Mean Flow', signif(metrics$jun.mean.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_mean_flow', 'mm7', 'July Mean Flow', signif(metrics$jul.mean.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_mean_flow', 'mm8', 'August Mean Flow', signif(metrics$aug.mean.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_mean_flow', 'mm9', 'September Mean Flow', signif(metrics$sep.mean.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_mean_flow', 'mm10', 'October Mean Flow', signif(metrics$oct.mean.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_mean_flow', 'mm11', 'November Mean Flow', signif(metrics$nov.mean.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_mean_flow', 'mm12', 'December Mean Flow', signif(metrics$dec.mean.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_high_flow', 'mh1', 'January High Flow', signif(metrics$jan.high.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_high_flow', 'mh2', 'February High Flow', signif(metrics$feb.high.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_high_flow', 'mh3', 'March High Flow', signif(metrics$mar.high.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_high_flow', 'mh4', 'April High Flow', signif(metrics$apr.high.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_high_flow', 'mh5', 'May High Flow', signif(metrics$may.high.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_high_flow', 'mh6', 'June High Flow', signif(metrics$jun.high.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_high_flow', 'mh7', 'July High Flow', signif(metrics$jul.high.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_high_flow', 'mh8', 'August High Flow', signif(metrics$aug.high.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_high_flow', 'mh9', 'September High Flow', signif(metrics$sep.high.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_high_flow', 'mh10', 'October High Flow', signif(metrics$oct.high.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_high_flow', 'mh11', 'November High Flow', signif(metrics$nov.high.flow, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_high_flow', 'mh12', 'December High Flow', signif(metrics$dec.high.flow, digits =3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('min_low_flow', 'min1', '1 Day Min Low Flow', signif(metrics$one.day.min, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('min_low_flow', 'min3', '3 Day Min Low Flow', signif(metrics$three.day.min, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('min_low_flow', 'min7', '7 Day Min Low Flow', signif(metrics$seven.day.min, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('min_low_flow', 'min30', '30 Day Min Low Flow', signif(metrics$thirty.day.min, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('min_low_flow', 'min90', '90 Day Min Low Flow', signif(metrics$ninety.day.min, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('med_low_flow', 'medl1', '1 Day Median Low Flow', signif(metrics$one.day.med.min, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('med_low_flow', 'medl3', '3 Day Median Low Flow', signif(metrics$three.day.med.min, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('med_low_flow', 'medl7', '7 Day Median Low Flow', signif(metrics$seven.day.med.min, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('med_low_flow', 'medl30', '30 Day Median Low Flow', signif(metrics$thirty.day.med.min, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('med_low_flow', 'medl90', '90 Day Median Low Flow', signif(metrics$ninety.day.med.min, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('max_high_flow', 'max1', '1 Day Max High Flow', signif(metrics$one.day.max, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('max_high_flow', 'max3', '3 Day Max High Flow', signif(metrics$three.day.max, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('max_high_flow', 'max7', '7 Day Max High Flow', signif(metrics$seven.day.max, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('max_high_flow', 'max30', '30 Day Max High Flow', signif(metrics$thirty.day.max, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('max_high_flow', 'max90', '90 Day Max High Flow', signif(metrics$ninety.day.max, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('med_high_flow', 'medh1', '1 Day Median High Flow', signif(metrics$one.day.med.max, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('med_high_flow', 'medh3', '3 Day Median High Flow', signif(metrics$three.day.med.max, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('med_high_flow', 'medh7', '7 Day Median High Flow', signif(metrics$seven.day.med.max, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('med_high_flow', 'medh30', '30 Day Median High Flow', signif(metrics$thirty.day.med.max, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('med_high_flow', 'medh90', '90 Day Median High Flow', signif(metrics$ninety.day.med.max, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('non-exceedance', 'ne1', '1% Non-Exceedance Flow', signif(metrics$flow.exceedance.1, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('non-exceedance', 'ne5', '5% Non-Exceedance Flow', signif(metrics$flow.exceedance.5, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('non-exceedance', 'ne50', '50% Non-Exceedance Flow', signif(metrics$flow.exceedance.50, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('non-exceedance', 'ne95', '95% Non-Exceedance Flow', signif(metrics$flow.exceedance.95, digits =3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('non-exceedance', 'ne99', '99% Non-Exceedance Flow', signif(metrics$flow.exceedance.99, digits =3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('monthly_non-exceedance', 'mne9_10', 'September 10%', signif(metrics$sept.10.percent, digits =3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('7q10', '', '7q10', signif(metrics$sevenQ.ten, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('dor_year', '', 'Year of Drought of Record Occurence', metrics$drought.record, riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('dor_mean', '', 'Drought of Record Year Mean Flow', signif(metrics$lowest.yearly.mean, digits = 3), riv.seg, mod.scenario, token, site_url)
vahydro_post_metric('baseflow', '', 'Mean Baseflow', signif(metrics$avg.baseflow, digits =3), riv.seg, mod.scenario, token, site_url)
counter <- counter + 1
}
}
automated_metric_2_vahydro('p6/p6_gb604', 'CBASE1808L55CY55R45P50R45P50Y', '1984-01-01', '2000-12-31', "C:\\Users\\Kevin D'Andrea\\Desktop\\HARP\\Github", "http://deq2.bse.vt.edu/d.bet", 'site', token)
riv.seg <- 'JB0_7051_0001'
data <- model_import_data_cfs(riv.seg, mod.phase, mod.scenario, start.date, end.date)
data <- water_year_trim(data)
View(data)
which(data$flow != 0)
which (data$flow == 0)
riv.seg <- 'JB0_7052_0001'
data <- model_import_data_cfs(riv.seg, mod.phase, mod.scenario, start.date, end.date)
data <- water_year_trim(data)
metrics <- metrics_calc_all(data) #calculate metrics into a matrix
View(data)
which(data$flow != 0)
riv.seg <- 'JB1_8090_0001'
data <- model_import_data_cfs(riv.seg, mod.phase, mod.scenario, start.date, end.date)
data <- water_year_trim(data)
metrics <- metrics_calc_all(data) #calculate metrics into a matrix
View(data)
which(data$flow != 0)
riv.seg <- 'JB2_7800_0001'
data <- model_import_data_cfs(riv.seg, mod.phase, mod.scenario, start.date, end.date)
data <- water_year_trim(data)
View(data)
which(data$flow != 0)
riv.seg <- 'JB3_7053_0001'
data <- model_import_data_cfs(riv.seg, mod.phase, mod.scenario, start.date, end.date)
data <- water_year_trim(data)
View(data)
which(data$flow != 0)
