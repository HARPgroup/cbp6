entity_type = "dh_feature",
propcode = mod.scenario
)
property <- getProperty(inputs, site, model)
metinfo <- list(
varkey = met.varkey,
propcode = met.propcode,
featureid = as.integer(as.character(model$pid)),
entity_type = "dh_properties"
)
property <- getProperty(inputs, site, property)
metinfo <- list(
varkey = met.varkey,
propcode = met.propcode,
featureid = as.integer(as.character(property$pid)),
entity_type = "dh_properties"
)
metprop <- getProperty(metinfo, site, metprop)
metprop
metric <- metprop$propvalue
import.vahydro.metric <- function(met.varkey, met.propcode, seg.or.gage, mod.scenario = "p532cal_062211", token, site = "http://deq2.bse.vt.edu/d.dh") {
if (length(seg.or.gage)==8) {
# GETTING GAGE DATA FROM VA HYDRO
hydrocode = paste("usgs_",seg.or.gage,sep="");
ftype = 'vahydro'; # nhd_huc8, nhd_huc10, vahydro
inputs <- list (
hydrocode = hydrocode
)
} else if (length(seg.or.gage)==13) {
# GETTING MODEL DATA FROM VA HYDRO
hydrocode = paste("vahydrosw_wshed_",seg.or.gage,sep="");
ftype = 'vahydro'; # nhd_huc8, nhd_huc10, vahydro
inputs <- list (
hydrocode = hydrocode,
bundle = 'watershed',
ftype = 'vahydro'
)
}
#property dataframe returned
feature = FALSE;
odata <- getFeature(inputs, token, site, feature);
hydroid <- odata[1,"hydroid"];
fname <- as.character(odata[1,]$name );
print(paste("Retrieved hydroid",hydroid,"for", fname,seg.or.gage, sep=' '));
# get the scenario model segment attached to this river feature
inputs <- list(
varkey = "om_model_element",
featureid = hydroid,
entity_type = "dh_feature",
propcode = mod.scenario
)
property <- getProperty(inputs, site, property)
metinfo <- list(
varkey = met.varkey,
propcode = met.propcode,
featureid = as.integer(as.character(property$pid)),
entity_type = "dh_properties"
)
metprop <- getProperty(metinfo, site, metprop)
metric <- metprop$propvalue
return(metric)
}
import.vahydro.metric(met.varkey = "max_high_flow", met.propcode = "max7", seg.or.gage = "02077500", token = token)
length(seg.or.gage)
import.vahydro.metric <- function(met.varkey, met.propcode, seg.or.gage, mod.scenario = "p532cal_062211", token, site = "http://deq2.bse.vt.edu/d.dh") {
if (nchar(seg.or.gage)==8) {
# GETTING GAGE DATA FROM VA HYDRO
hydrocode = paste("usgs_",seg.or.gage,sep="");
ftype = 'vahydro'; # nhd_huc8, nhd_huc10, vahydro
inputs <- list (
hydrocode = hydrocode
)
} else if (nchar(seg.or.gage)==13) {
# GETTING MODEL DATA FROM VA HYDRO
hydrocode = paste("vahydrosw_wshed_",seg.or.gage,sep="");
ftype = 'vahydro'; # nhd_huc8, nhd_huc10, vahydro
inputs <- list (
hydrocode = hydrocode,
bundle = 'watershed',
ftype = 'vahydro'
)
}
#property dataframe returned
feature = FALSE;
odata <- getFeature(inputs, token, site, feature);
hydroid <- odata[1,"hydroid"];
fname <- as.character(odata[1,]$name );
print(paste("Retrieved hydroid",hydroid,"for", fname,seg.or.gage, sep=' '));
# get the scenario model segment attached to this river feature
inputs <- list(
varkey = "om_model_element",
featureid = hydroid,
entity_type = "dh_feature",
propcode = mod.scenario
)
property <- getProperty(inputs, site, property)
metinfo <- list(
varkey = met.varkey,
propcode = met.propcode,
featureid = as.integer(as.character(property$pid)),
entity_type = "dh_properties"
)
metprop <- getProperty(metinfo, site, metprop)
metric <- metprop$propvalue
return(metric)
}
import.vahydro.metric(met.varkey = "max_high_flow", met.propcode = "max7", seg.or.gage = "02077500", token = token)
nchar(seg.or.gage)
import.vahydro.metric <- function(met.varkey, met.propcode, seg.or.gage, mod.scenario = "p532cal_062211", token, site = "http://deq2.bse.vt.edu/d.dh") {
if (nchar(seg.or.gage)==8) {
# GETTING GAGE DATA FROM VA HYDRO
hydrocode = paste("usgs_",seg.or.gage,sep="");
ftype = 'vahydro'; # nhd_huc8, nhd_huc10, vahydro
inputs <- list (
hydrocode = hydrocode
)
} else if (nchar(seg.or.gage)==13) {
# GETTING MODEL DATA FROM VA HYDRO
hydrocode = paste("vahydrosw_wshed_",seg.or.gage,sep="");
ftype = 'vahydro'; # nhd_huc8, nhd_huc10, vahydro
inputs <- list (
hydrocode = hydrocode,
bundle = 'watershed',
ftype = 'vahydro'
)
}
#property dataframe returned
feature = FALSE;
odata <- getFeature(inputs, token, site, feature);
hydroid <- odata[1,"hydroid"];
fname <- as.character(odata[1,]$name );
print(paste("Retrieved hydroid",hydroid,"for", fname,seg.or.gage, sep=' '));
# get the scenario model segment attached to this river feature
inputs <- list(
varkey = "om_model_element",
featureid = hydroid,
entity_type = "dh_feature",
propcode = mod.scenario
)
property <- getProperty(inputs, site, property)
metinfo <- list(
varkey = met.varkey,
propcode = met.propcode,
featureid = as.integer(as.character(property$pid)),
entity_type = "dh_properties"
)
metprop <- getProperty(metinfo, site, metprop)
metric <- metprop$propvalue
return(metric)
}
import.vahydro.metric(met.varkey = "max_high_flow", met.propcode = "max7", seg.or.gage = "02077500", token = token)
if (nchar(seg.or.gage)==8) {
# GETTING GAGE DATA FROM VA HYDRO
hydrocode = paste("usgs_",seg.or.gage,sep="");
ftype = 'vahydro'; # nhd_huc8, nhd_huc10, vahydro
inputs <- list (
hydrocode = hydrocode
)
} else if (nchar(seg.or.gage)==13) {
# GETTING MODEL DATA FROM VA HYDRO
hydrocode = paste("vahydrosw_wshed_",seg.or.gage,sep="");
ftype = 'vahydro'; # nhd_huc8, nhd_huc10, vahydro
inputs <- list (
hydrocode = hydrocode,
bundle = 'watershed',
ftype = 'vahydro'
)
}
seg.or.gage <- "02077500"
library('lubridate')
library('dataRetrieval')
# Setting active directory
# Setting working directory to the source file location
current_path <- rstudioapi::getActiveDocumentContext()$path
# Setting up output location
split.location <- strsplit(current_path, split = '/')
split.location <- as.vector(split.location[[1]])
basepath.stop <- as.numeric(which(split.location == 'GitHub'))
basepath <- paste0(split.location[1:basepath.stop], collapse = "/")
container <- paste0(basepath,"/cbp6/code/DEQ_Model_vs_Climate_Model")
# Input River Segment ID number
SegID <- "PM7_4820_0001"
# Should new or original data be used?
new.or.original <- "new"
site <- "http://deq2.bse.vt.edu/d.bet"    #Specify the site of interest, either d.bet OR d.dh
#retrieve rest token
source(paste(basepath,"auth.private", sep = "/")); #load rest username and password, contained in auth.private file
source(paste(basepath, "rest_functions.R", sep = '/')) # loading REST functions, like token generator
token <- rest_token(site, token, rest_uname, rest_pw);
options(timeout=120); # set timeout to twice default level to avoid abort due to high traffic
import.vahydro.metric(met.varkey, met.propcode, seg.or.gage, mod.scenario = "p532cal_062211", token, site = "http://deq2.bse.vt.edu/d.dh")
import.vahydro.metric <- function(met.varkey, met.propcode, seg.or.gage, mod.scenario = "p532cal_062211", token, site = "http://deq2.bse.vt.edu/d.dh") {
if (nchar(seg.or.gage)==8) {
# GETTING GAGE DATA FROM VA HYDRO
hydrocode = paste("usgs_",seg.or.gage,sep="");
ftype = 'vahydro'; # nhd_huc8, nhd_huc10, vahydro
inputs <- list (
hydrocode = hydrocode
)
} else if (nchar(seg.or.gage)==13) {
# GETTING MODEL DATA FROM VA HYDRO
hydrocode = paste("vahydrosw_wshed_",seg.or.gage,sep="");
ftype = 'vahydro'; # nhd_huc8, nhd_huc10, vahydro
inputs <- list (
hydrocode = hydrocode,
bundle = 'watershed',
ftype = 'vahydro'
)
}
#property dataframe returned
feature = FALSE;
odata <- getFeature(inputs, token, site, feature);
hydroid <- odata[1,"hydroid"];
fname <- as.character(odata[1,]$name );
print(paste("Retrieved hydroid",hydroid,"for", fname,seg.or.gage, sep=' '));
# get the scenario model segment attached to this river feature
inputs <- list(
varkey = "om_model_element",
featureid = hydroid,
entity_type = "dh_feature",
propcode = mod.scenario
)
property <- getProperty(inputs, site, property)
metinfo <- list(
varkey = met.varkey,
propcode = met.propcode,
featureid = as.integer(as.character(property$pid)),
entity_type = "dh_properties"
)
metprop <- getProperty(metinfo, site, metprop)
metric <- metprop$propvalue
return(metric)
}
met.varkey <- "monthly_low_flow"
met.propcode <- "ml3"
seg.or.gage <- "02077500"
import.vahydro.metric(met.varkey, met.propcode, seg.or.gage, mod.scenario = "p532cal_062211", token, site = "http://deq2.bse.vt.edu/d.dh")
nchar(seg.or.gage)==8
# GETTING GAGE DATA FROM VA HYDRO
hydrocode = paste("usgs_",seg.or.gage,sep="");
ftype = 'vahydro'; # nhd_huc8, nhd_huc10, vahydro
inputs <- list (
hydrocode = hydrocode
)
#property dataframe returned
feature = FALSE;
odata <- getFeature(inputs, token, site, feature);
hydroid <- odata[1,"hydroid"];
nchar(seg.or.gage) == 13
if (nchar(seg.or.gage)==8) {
# GETTING GAGE DATA FROM VA HYDRO
hydrocode = paste("usgs_",seg.or.gage,sep="");
ftype = 'vahydro'; # nhd_huc8, nhd_huc10, vahydro
inputs <- list (
hydrocode = hydrocode
)
} else if (nchar(seg.or.gage)==13) {
# GETTING MODEL DATA FROM VA HYDRO
hydrocode = paste("vahydrosw_wshed_",seg.or.gage,sep="");
ftype = 'vahydro'; # nhd_huc8, nhd_huc10, vahydro
inputs <- list (
hydrocode = hydrocode,
bundle = 'watershed',
ftype = 'vahydro'
)
}
View(inputs)
met.varkey <- "monthly_low_flow"
met.propcode <- "ml3"
seg.or.gage <- "02077500"
if (nchar(seg.or.gage)==8) {
# GETTING GAGE DATA FROM VA HYDRO
hydrocode = paste("usgs_",seg.or.gage,sep="");
ftype = 'vahydro'; # nhd_huc8, nhd_huc10, vahydro
inputs <- list (
hydrocode = hydrocode
)
} else if (nchar(seg.or.gage)==13) {
# GETTING MODEL DATA FROM VA HYDRO
hydrocode = paste("vahydrosw_wshed_",seg.or.gage,sep="");
ftype = 'vahydro'; # nhd_huc8, nhd_huc10, vahydro
inputs <- list (
hydrocode = hydrocode,
bundle = 'watershed',
ftype = 'vahydro'
)
}
View(inputs)
#property dataframe returned
feature = FALSE;
odata <- getFeature(inputs, token, site, feature);
# DOCUMENTATION -----------------------------------------------------------
# Loads previously downloaded data, trims it to proper time frame, removes
# lines of code where gage or model data is NA, area-adjusts data.
# LOADING LIBRARIES -------------------------------------------------------
library('lubridate')
library('dataRetrieval')
# Setting active directory
# Setting working directory to the source file location
current_path <- rstudioapi::getActiveDocumentContext()$path
# Setting up output location
split.location <- strsplit(current_path, split = '/')
split.location <- as.vector(split.location[[1]])
basepath.stop <- as.numeric(which(split.location == 'GitHub'))
basepath <- paste0(split.location[1:basepath.stop], collapse = "/")
container <- paste0(basepath,"/cbp6/code/DEQ_Model_vs_Climate_Model")
# INPUTS ------------------------------------------------------------------
# Input River Segment ID number
SegID <- "PM7_4820_0001"
# Should new or original data be used?
new.or.original <- "new"
site <- "http://deq2.bse.vt.edu/d.bet"    #Specify the site of interest, either d.bet OR d.dh
# SETUP
#retrieve rest token
source(paste(basepath,"auth.private", sep = "/")); #load rest username and password, contained in auth.private file
source(paste(basepath, "rest_functions.R", sep = '/')) # loading REST functions, like token generator
token <- rest_token(site, token, rest_uname, rest_pw);
options(timeout=120); # set timeout to twice default level to avoid abort due to high traffic
source('~/HARP/GitHub/cbp6/code/cbp6_functions.R', echo=TRUE)
library(rstudioapi)
# Setting active directory
current_path <- rstudioapi::getActiveDocumentContext()$path
# Setting up output location
split.location <- strsplit(current_path, split = '/')
split.location <- as.vector(split.location[[1]])
basepath.stop <- as.numeric(which(split.location == 'GitHub'))
container <- paste0(split.location[1:basepath.stop], collapse = "/")
source(paste0(container, "/cbp6/code/cbp6_functions.R"))
source(paste0(container, "/rest_functions.R"))
met.varkey <- "monthly_low_flow"
met.propcode <- "ml3"
seg.or.gage <- "02077500"
import.vahydro.metric(met.varkey, met.propcode, seg.or.gage, mod.scenario = "p532cal_062211", token, site = "http://deq2.bse.vt.edu/d.dh")
import.vahydro.metric(met.varkey, met.propcode, seg.or.gage, mod.scenario = "p532cal_062211", token, site = "http://deq2.bse.vt.edu/d.bet")
site <- "http://deq2.bse.vt.edu/d.dh"    #Specify the site of interest, either d.bet OR d.dh
#retrieve rest token
source(paste(basepath,"auth.private", sep = "/")); #load rest username and password, contained in auth.private file
source(paste(basepath, "rest_functions.R", sep = '/')) # loading REST functions, like token generator
token <- rest_token(site, token, rest_uname, rest_pw);
options(timeout=120); # set timeout to twice default level to avoid abort due to high traffic
import.vahydro.metric(met.varkey, met.propcode, seg.or.gage, mod.scenario = "p532cal_062211", token, site = "http://deq2.bse.vt.edu/d.dh")
overall.mean <- import.vahydro.metric(met.varkey = "overall.mean", met.propcode = "", seg.or.gage = seg.or.gage, mod.scenario = mod.scenario, token = token, site = site)
mod.scenario = "p532cal_062211"
overall.mean <- import.vahydro.metric(met.varkey = "overall.mean", met.propcode = "", seg.or.gage = seg.or.gage, mod.scenario = mod.scenario, token = token, site = site)
met.propcode <- ""
met.propcode
is.na(met.propcode)
is.empty(met.propcode)
nchar(met.propcode)
met.propcode <- "  "
nchar(met.propcode)
trimws(met.propcode)
nchar(met.propcode)
nchar(trimws(met.propcode))
library(rstudioapi)
# Setting active directory
current_path <- rstudioapi::getActiveDocumentContext()$path
# Setting up output location
split.location <- strsplit(current_path, split = '/')
split.location <- as.vector(split.location[[1]])
basepath.stop <- as.numeric(which(split.location == 'GitHub'))
container <- paste0(split.location[1:basepath.stop], collapse = "/")
source(paste0(container, "/cbp6/code/cbp6_functions.R"))
source(paste0(container, "/rest_functions.R"))
RivSeg = "JA5_7480_0001"
# Model phase and scenario
mod.phase <- "p532c-sova" # should be "p6/p6_gb604/tmp" (phase 6) or "p532c-sova" (phase 5)
mod.scenario <- "p532cal_062211" # should be "CFBASE30Y20180615" (phase 6) or "p532cal_062211" (phase 5)
# Start and end dates of data (p5 Model: Has data from 1984-01-01 to 2005-12-31, p6 to 2015-12-31)
start.date <- "1984-01-01"
end.date <- "2005-12-31"
site = "02077500"
met.varkey <- "monthly_low_flow"
met.propcode <- "ml3"
seg.or.gage <- "02077500"
site <- "http://deq2.bse.vt.edu/d.dh"    #Specify the site of interest, either d.bet OR d.dh
#retrieve rest token
source(paste(basepath,"auth.private", sep = "/")); #load rest username and password, contained in auth.private file
source(paste(basepath, "rest_functions.R", sep = '/')) # loading REST functions, like token generator
# Setting active directory
# Setting working directory to the source file location
current_path <- rstudioapi::getActiveDocumentContext()$path
# Setting up output location
split.location <- strsplit(current_path, split = '/')
split.location <- as.vector(split.location[[1]])
basepath.stop <- as.numeric(which(split.location == 'GitHub'))
basepath <- paste0(split.location[1:basepath.stop], collapse = "/")
container <- paste0(basepath,"/cbp6/code/DEQ_Model_vs_Climate_Model")
# Input River Segment ID number
SegID <- "PM7_4820_0001"
# Should new or original data be used?
new.or.original <- "new"
site <- "http://deq2.bse.vt.edu/d.dh"    #Specify the site of interest, either d.bet OR d.dh
#retrieve rest token
source(paste(basepath,"auth.private", sep = "/")); #load rest username and password, contained in auth.private file
source(paste(basepath, "rest_functions.R", sep = '/')) # loading REST functions, like token generator
token <- rest_token(site, token, rest_uname, rest_pw);
options(timeout=120); # set timeout to twice default level to avoid abort due to high traffic
import.vahydro.metric(met.varkey, met.propcode, seg.or.gage, mod.scenario = "p532cal_062211", token, site = "http://deq2.bse.vt.edu/d.bet")
overall.mean <- import.vahydro.metric(met.varkey = "overall.mean", met.propcode = "", seg.or.gage = seg.or.gage, mod.scenario = mod.scenario, token = token, site = site)
overall.mean <- import.vahydro.metric(met.varkey = "overall_mean", met.propcode = "", seg.or.gage = seg.or.gage, mod.scenario = mod.scenario, token = token, site = site)
import.model.data.cfs <- function(riv.seg, mod.phase, mod.scenario, start.date, end.date) {
# Downloading and exporting hourly model data
model_hourly <- read.csv(paste0("http://deq2.bse.vt.edu/", mod.phase, "/wdm/river/", mod.scenario, "/stream/",
RivSeg, "_0111.csv"), header = FALSE, sep = ",", stringsAsFactors = FALSE);
# Converting hourly to daily data and exporting daily data
model_hourly <- model_hourly[-1,]
model_hourly$V1 <- trimws(model_hourly$V1, which = "both")
colnames(model_hourly) <- c("year","month","day","hour","ovol")
model_hourly$date <- as.Date(paste0(model_hourly$year,"-",model_hourly$month,"-",model_hourly$day))
model_daily <- aggregate(model_hourly$ovol, list(model_hourly$date), FUN = sum)
colnames(model_daily) <- c("date","flow")
model_daily$flow <- model_daily$flow * 0.504167 # conversion from acre-feet to cfs
return(model_daily)
}
import.gage.data.cfs <- function(siteNo, start.date, end.date) {
#Download and export raw USGS data
pCode <- "00060"
USGS_daily <- readNWISdv(siteNo, pCode, start.date, end.date)
#Format USGS data to date and flow
USGS_daily <- USGS_daily[,c(3,4)]
colnames(USGS_daily) <- c('date','flow')
return(USGS_daily)
}
import.vahydro.metric <- function(met.varkey, met.propcode, seg.or.gage, mod.scenario = "p532cal_062211", token, site) {
if (nchar(seg.or.gage)==8) {
# GETTING GAGE DATA FROM VA HYDRO
hydrocode = paste("usgs_",seg.or.gage,sep="");
ftype = 'vahydro'; # nhd_huc8, nhd_huc10, vahydro
inputs <- list (
hydrocode = hydrocode
)
} else if (nchar(seg.or.gage)==13) {
# GETTING MODEL DATA FROM VA HYDRO
hydrocode = paste("vahydrosw_wshed_",seg.or.gage,sep="");
ftype = 'vahydro'; # nhd_huc8, nhd_huc10, vahydro
inputs <- list (
hydrocode = hydrocode,
bundle = 'watershed',
ftype = 'vahydro'
)
}
#property dataframe returned
feature = FALSE;
odata <- getFeature(inputs, token, site, feature);
hydroid <- odata[1,"hydroid"];
fname <- as.character(odata[1,]$name );
print(paste("Retrieved hydroid",hydroid,"for", fname,seg.or.gage, sep=' '));
# get the scenario model segment attached to this river feature
inputs <- list(
varkey = "om_model_element",
featureid = hydroid,
entity_type = "dh_feature",
propcode = mod.scenario
)
property <- getProperty(inputs, site, property)
metinfo <- list(
varkey = met.varkey,
propcode = met.propcode,
featureid = as.integer(as.character(property$pid)),
entity_type = "dh_properties"
)
metprop <- getProperty(metinfo, site, metprop)
metric <- metprop$propvalue
return(metric)
}
import.all.vahydro.metrics <- function(seg.or.gage, mod.scenario, token, site) {
overall.mean <- import.vahydro.metric(met.varkey = "overall_mean", met.propcode = , seg.or.gage = seg.or.gage, mod.scenario = mod.scenario, token = token, site = site)
}
water.year.trim <- function(data) {
library(lubridate)
data.length <- length(data$date)
start.month <- month(data$date[1])
end.month <- month(data$date[data.length])
start.day <- day(data$date[1])
end.day <- day(data$date[data.length])
if (start.month <= 9) {
start.year <- year(data$date[1])
} else if (start.month == 10 & start.day == 1) {
start.year <- year(data$date[1])
} else {
start.year <- year(data$date[1]) + 1
}
if (end.month >= 10) {
end.year <- year(data$date[data.length])
} else if (end.month == 9 & end.day == 30) {
end.year <- year(data$date[data.length])
} else {
end.year <- year(data$date[data.length]) - 1
}
start.date <- paste0(start.year, "-10-01")
end.date <- paste0(end.year, "-09-30")
start.line <- which(data$date == start.date)
end.line <- which(data$date == end.date)
data <- data[start.line:end.line,]
return(data)
}
metric.calculation <- function(data, vahydro.upload = F) {
# for: number of metrics:
# Calculates flow metric
# Uploads metric to VA Hydro
# Puts calculated metric in "all metric" dataframe
# Returns dataframe of all calculated metrics
return()
}
scenario.comparison <- function(metrics1, metrics2) {
# Calculates percent change for all metrics (mod2-mod1/mod1, since mod1 is considered basis of comparison)
# Returns dataframe of pct changes for all metrics
return()
}
overall.mean <- import.vahydro.metric(met.varkey = "overall_mean", met.propcode = , seg.or.gage = seg.or.gage, mod.scenario = mod.scenario, token = token, site = site)
overall.mean <- import.vahydro.metric(met.varkey = "overall_mean", met.propcode = '', seg.or.gage = seg.or.gage, mod.scenario = mod.scenario, token = token, site = site)
