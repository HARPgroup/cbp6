# #monthly totals via sqldf
# mosum <- sqldf("SELECT  month, sum(count) count FROM modat GROUP BY month")
# mosum$year <- rep(num_eyear+1,12)
#
# #yearly sum
# yesum <-  sqldf("SELECT year, sum(count) count FROM modat GROUP BY year")
# yesum$month <- rep(13,length(yesum$year))
#
# #create monthly averages
# moavg<- sqldf('SELECT * FROM mosum')
# moavg$year <- moavg$year + 1
# moavg$avg <- round(moavg$count/((num_eyear-num_syear)+1),1)
#
# #create yearly averages
# yeavg<- sqldf('SELECT * FROM yesum')
# yeavg$month <- yeavg$month + 1
# yeavg$avg <- round(yeavg$count/12,1)
#
# #create x and y axis breaks
# y_breaks <- seq(syear,num_eyear+2,1)
# x_breaks <- seq(1,14,1)
#
# #create x and y labels
# y_labs <- c(seq(syear,eyear,1),'Totals', 'Avg')
# x_labs <- c(month.abb,'Totals','Avg')
#Graphing
# count_grid <- ggplot() +
#   geom_tile(data=modat, color='black',aes(x = month, y = year, fill = count)) +
#   geom_text(aes(label=modat$count, x=modat$month, y= modat$year), size = 3.5, colour = "black") +
#   scale_fill_gradient2(low = "#00cc00", high = "red",mid ='yellow',
#                        midpoint = 15, guide = "colourbar",
#                        name= 'Unmet Days') +
#   theme(panel.background = element_rect(fill = "transparent"))+
#   theme() + labs(title = 'Threshold Flow Heatmap', y=NULL, x=NULL) +
#   scale_x_continuous(expand=c(0,0), breaks= x_breaks, labels=x_labs, position='top') +
#   scale_y_reverse(expand=c(0,0), breaks=y_breaks, labels= y_labs) +
#   theme(axis.ticks= element_blank()) +
#   theme(plot.title = element_text(size = 12, face = "bold",  hjust = 0.5)) +
#   theme(legend.title.align = 0.5)
#
# flow <- count_grid + new_scale_fill() +
#   geom_tile(data = yesum, color='black', aes(x = month, y = year, fill = count)) +
#   geom_tile(data = mosum, color='black', aes(x = month, y = year, fill = count)) +
#   geom_text(data = yesum, size = 3.5, color='black', aes(x = month, y = year, label = count)) +
#   geom_text(data = mosum, size = 3.5, color='black', aes(x = month, y = year, label = count)) +
#   scale_fill_gradient2(low = "#63D1F4", high = "#8A2BE2", mid='#CAB8FF',
#                        midpoint = mean(mosum$count), name= 'Total Unmet Days')
#
#
# flow_avg <- flow + new_scale_fill()+
#   geom_tile(data = yeavg, color='black', aes(x = month, y = year, fill = avg)) +
#   geom_tile(data = moavg, color='black', aes(x = month, y = year, fill = avg)) +
#   geom_text(data = yeavg, size = 3.5, color='black', aes(x = month, y = year, label = avg)) +
#   geom_text(data = moavg, size = 3.5, color='black', aes(x = month, y = year, label = avg))+
#   scale_fill_gradient2(low = "#FFF8DC", mid = "#FFDEAD", high ="#DEB887",
#                        name= 'Average Unmet Days', midpoint = mean(yeavg$avg))
# flow_avg
threshold_grid <- ggplot(modat)+
geom_tile(aes(y=year, x=month, fill=count)) +
geom_text(aes(y=year, x=month, label = round(count, 1))) +
theme_bw()+
labs( title = 'Streamflow Threshold Heatmap', subtitle = 'Number of days that the streamflow (cfs) is less than the threshold flow', x= NULL, y = NULL) +
theme(plot.title = element_text(face = 'bold',hjust = 0.5)) +
scale_x_discrete(position='top',
labels = c('Jan','Feb','Mar','Apr',
'May','Jun','July','Aug','Sep',
'Oct','Nov','Dec'))+
scale_y_discrete(position = 'right')+
scale_fill_gradient2(low = "#00cc00", mid = "yellow", high ="red",
name= 'Count', midpoint = 15)
threshold_grid
})
}
#Running the app
#Running the app
shinyApp(ui=ui, server=server)
site <- "http://deq2.bse.vt.edu/d.dh"
basepath='/var/www/R';
source(paste(basepath,'config.R',sep='/'))
token <- rest_token(site, token, rest_uname, rest_pw)
View(getProperty)
inputs = list(
pid <- 4806686
)
#Setup
site <- "http://deq2.bse.vt.edu/d.dh"
basepath='/var/www/R';
source(paste(basepath,'config.R',sep='/'))
token <- rest_token(site, token, rest_uname, rest_pw)
inputs = list(
pid <- 4806686
)
source(paste(om_location,'R/summarize/model_2_intake.R',sep='/'))
View(model_2_intake)
inputs = list(
pid <- 4806697
)
drainage area <- getProperty(inputs,site)
drainage_area <- getProperty(inputs,site)
drainage_area <- getFeature(inputs,site)
View(getFeature)
drainage_area <- getFeature(inputs,base_url = site)
drainage_area <- getFeature(inputs,token = token, base_url = site)
View(drainage_area)
varkey = "erom_q0001e_mean",
featureid = 199720,
entity_type = "dh_feature"
xxxinputs <- list(
varkey = "erom_q0001e_mean",
featureid = 199720,
entity_type = "dh_feature"
)
xxxinputs <- list(
varkey = "erom_q0001e_mean",
featureid = 199720,
entity_type = "dh_feature"
)
dataframe <- getProperty(xxxinputs, site, prop)
View(dataframe)
View(dataframe)
inputs = list(
varkey =   varkey = "area",
featureid = 4806686,
entity_type = "dh_feature"
)
inputs = list(
varkey = "area",
featureid = 4806686,
entity_type = "dh_feature"
)
drainage_area <- getProperty(inputs,token = token, base_url = site)
drainage_area <- getProperty(inputs, site)
inputs = list(
varkey = "om_water_model_node",
featureid = 68326,
entity_type = "dh_feature"
)
drainage_area <- getProperty(inputs, site)
View(inputs)
View(drainage_area)
xxxinputs2 <- list(
varkey = "erom_q0001e_mean",
featureid = 199720,
entity_type = "dh_feature"
)
dataframe <- getFeature(inputsxxx2, token, site, feature)
dataframe <- getFeature(xxxinputs2, token, site, feature)
View(dataframe)
xxxunputs2 <- list (
hydrocode = 'vahydrosw_wshed_YP3_6470_6690',
bundle = 'watershed',
ftype = 'vahydro'
)
dataframe <- getFeature(xxxinputs2, token, site, feature)
View(dataframe)
dataframe <- getProperty(xxxinputs, site, prop)
View(getProperty)
View(getProperty)
inputs = list(
varkey = "om_model_info",
pid <- 4806702,
entity_type = "dh_feature"
)
drainage_area <- getProperty(inputs, site)
View(drainage_area)
pid <- 4827139 #WILDERNESS SERVICE AREA:Rapidan River
huc_level <- 'huc8'
flow_metric <- 'erom_q0001e_mean'
flow_reduction_pct <- 10
##########################################################
#Retrieve intake hydroid from facility:riverseg model pid
intake.df <- model_2_intake(pid,site)
library(elfgen)
library(sqldf)
library(ggplot2)
library(stringr)
#### Load in directories and repositories
site <- "http://deq2.bse.vt.edu/d.dh"
save_directory <- "/var/www/html/data/proj3/out"
save_url <- paste(str_remove(site, 'd.dh'), "data/proj3/out", sep='');
basepath ='/var/www/R';
source(paste(basepath,'config.R',sep='/'))
source(paste(om_location,'R/summ
pid <- 4827139 #WILDERNESS SERVICE AREA:Rapidan River
huc_level <- 'huc8'
flow_metric <- 'erom_q0001e_mean'
flow_reduction_pct <- 10
##########################################################
#Retrieve intake hydroid from facility:riverseg model pid
intake.df <- model_2_intake(pid,site)
source(paste(om_location,'R/summarize/model_2_intake.R',sep='/'))
##########################################################
#Retrieve intake hydroid from facility:riverseg model pid
intake.df <- model_2_intake(pid,site)
pid <- 4827139 #WILDERNESS SERVICE AREA:Rapidan River
##########################################################
#Retrieve intake hydroid from facility:riverseg model pid
intake.df <- model_2_intake(pid,site)
View(intake.df)
hydroid <- intake.df$intake.hydroid
#### Take in watershed and mean intake data
site_comparison <- paste('http://deq1.bse.vt.edu/d.dh/dh-feature-contained-within-export', hydroid, 'watershed', sep = '/')
containing_watersheds <- read.csv(file=site_comparison, header=TRUE, sep=",")
View(containing_watersheds)
nhd_code <- sqldf(paste("SELECT hydrocode
FROM containing_watersheds
WHERE ftype = 'nhd_", huc_level,"'", sep = ""))
huc_level <- 'huc8'
flow_metric <- 'erom_q0001e_mean'
flow_reduction_pct <- 10
nhd_code <- sqldf(paste("SELECT hydrocode
FROM containing_watersheds
WHERE ftype = 'nhd_", huc_level,"'", sep = ""))
View(nhd_code)
hydroid2 <- sqldf("SELECT hydroid
FROM containing_watersheds
WHERE ftype
LIKE '%nhdplus%'")
View(hydroid2)
inputs <- list(
varkey = flow_metric,
featureid = as.numeric(hydroid2$hydroid),
entity_type = "dh_feature"
)
dataframe <- getProperty(inputs, site)
View(dataframe)
inputs = list(
varkey = "om_model_info",
featureid <- 4806702,
entity_type = "dh_feature"
)
drainage_area <- getProperty(inputs, site)
View(drainage_area)
inputs = list(
varkey = "om_model_info",
propcode <- 4806702,
entity_type = "dh_feature"
)
drainage_area <- getProperty(inputs, site)
View(drainage_area)
inputs = list(
varkey = "om_model_info",
propcode <- 4806686,
entity_type = "dh_feature"
)
drainage_area <- getProperty(inputs, site)
View(drainage_area)
#Setup
site <- "http://deq1.bse.vt.edu/d.dh"
inputs = list(
varkey = "om_model_info",
propcode <- 4806686,
entity_type = "dh_feature"
)
drainage_area <- getProperty(inputs, site)
inputs = list(
varkey = "om_water_model_node",
featureid <- 68326,
entity_type = "dh_feature"
)
drainage_area <- getProperty(inputs, site)
#Setup
site <- "http://deq2.bse.vt.edu/d.dh"
drainage_area <- getProperty(inputs, site)
View(drainage_area)
View(drainage_area)
inputs = list(
varkey = "om_water_model_node",
featureid <- 4711466,
entity_type = "dh_feature"
)
drainage_area <- getProperty(inputs, site)
View(drainage_area)
inputs = list(
varkey = "om_water_model_node",
featureid <- 68326,
entity_type = "dh_feature"
)
drainage_area <- getProperty(inputs, site)
View(drainage_area)
inputs = list(
varkey - 'om_object_class_constant'
propname <- 'drainage area'
pid <- 4806702
)
inputs = list(
varkey - 'om_object_class_constant',
propname <- 'drainage area',
pid <- 4806702
)
inputs = list(
varkey <- 'om_object_class_constant',
propname <- 'drainage area',
pid <- 4806702
)
drainage_area <- getProperty(inputs, site)
inputs = list(
varkey <- 'om_object_class_constant',
propname <- 'drainage area',
#pid <- 4806702
)
inputs = list(
varkey <- 'om_object_class_constant',
propname <- 'drainage area'
#pid <- 4806702
)
drainage_area <- getProperty(inputs, site)
inputs = list(
varkey <- 'om_object_class_constant',
propname <- 'drainage_area'
#pid <- 4806702
)
drainage_area <- getProperty(inputs, site)
inputs = list(
varkey = 'om_object_class_constant',
propname = 'drainage_area',
propcode = 4806686
#pid <- 4806702
)
drainage_area <- getProperty(inputs, site)
inputs = list(
varkey = 'om_object_class_constant',
propname = 'drainage_area'
#propcode = 4806686
#pid <- 4806702
)
drainage_area <- getProperty(inputs, site)
View(drainage_area)
inputs = list(
varkey = 'om_object_class_constant',
propname = 'drainage_area',
featureid = 4711466
#propcode = 4806686
#pid <- 4806702
)
drainage_area <- getProperty(inputs, site)
inputs = list(
varkey = 'om_object_class_constant',
propname = 'drainage_area',
featureid = 68326
#propcode = 4806686
#pid <- 4806702
)
drainage_area <- getProperty(inputs, site)
xxxinputs2 <- list(
varkey = "erom_q0001e_mean",
featureid = 199720,
entity_type = "dh_feature"
)
dataframe <- getFeature(xxxinputs2, token, site, feature)
View(dataframe)
xxxinputs <- list(
varkey = "erom_q0001e_mean",
featu,
entity_type = "dh_feature"
)
dataframe <- getProperty(xxxinputs, site, prop)
xxxinputs <- list(
varkey = "erom_q0001e_mean",
featu,
entity_type = "dh_feature"
)
xxxinputs <- list(
varkey = "erom_q0001e_mean",
featureid = 199720,
entity_type = "dh_feature"
)
dataframe <- getProperty(xxxinputs, site, prop)
View(dataframe)
inputs = list(
varkey = "om_water_model_node",
featureid <- 68326,
entity_type = "dh_feature"
)
drainage_area <- getProperty(inputs, site)
View(drainage_area)
inputs = list(
varkey = 'om_object_class_constant',
propname = 'drainage_area'
#featureid = 68326
#propcode = 4806686
#pid <- 4806702
)
drainage_area <- getProperty(inputs, site)
View(drainage_area)
inputs = list(
varkey = 'om_object_class_constant',
propname = 'drainage_area',
vaid <- 4806702
#featureid = 68326
#propcode = 4806686
#pid <- 4806702
)
drainage_area <- getProperty(inputs, site)
View(drainage_area)
inputs = list(
varkey = 'om_object_class_constant',
propname = 'drainage_area',
vid <- 4806702
#featureid = 68326
#propcode = 4806686
#pid <- 4806702
)
drainage_area <- getProperty(inputs, site)
View(drainage_area)
inputs = list(
varkey = 'om_object_class_constant',
propname = 'drainage_area',
featureid <- 4806702
#featureid = 68326
#propcode = 4806686
#pid <- 4806702
)
drainage_area <- getProperty(inputs, site)
View(drainage_area)
inputs = list(
varkey = 'om_object_class_constant',
featureid <- 4806702,
propname = 'drainage_area'
#featureid = 68326
#propcode = 4806686
#pid <- 4806702
)
drainage_area <- getProperty(inputs, site)
inputs = list(
varkey = 'om_object_class_constant',
featureid <- 4806702,
propname = 'drainage_area'
#featureid = 68326
#propcode = 4806686
#pid <- 4806702
)
drainage_area <- getProperty(inputs, site, prop)
View(drainage_area)
inputs = list(
varkey = 'om_object_class_constant',
featureid <- 4806686,
propname = 'area'
#featureid = 68326
#propcode = 4806686
#pid <- 4806702
)
drainage_area <- getProperty(inputs, site, prop)
View(drainage_area)
inputs = list(
varkey = 'om_object_class_constant',
featureid <- 4806686,
propname = 'area',
entity_type = 'dh_feature'
#featureid = 68326
#propcode = 4806686
#pid <- 4806702
)
drainage_area <- getProperty(inputs, site, prop)
inputs = list(
varkey = 'om_object_class_constant',
propname = 'area',
entity_type = 'dh_feature'
#featureid = 68326
#propcode = 4806686
#pid <- 4806702
)
drainage_area <- getProperty(inputs, site, prop)
inputs = list(
varkey = 'om_object_class_constant',
propname = 'drainage_area',
entity_type = 'dh_feature'
#featureid = 68326
#propcode = 4806686
#pid <- 4806702
)
drainage_area <- getProperty(inputs, site, prop)
inputs = list(
varkey = 'om_object_class_constant',
#propname = 'drainage_area',
entity_type = 'dh_feature'
#featureid = 68326
#propcode = 4806686
#pid <- 4806702
)
drainage_area <- getProperty(inputs, site, prop)
View(drainage_area)
inputs = list(
varkey = 'om_object_class_constant',
propname = 'drainage_area',
entity_type = 'dh_properties'
#featureid = 68326
#propcode = 4806686
#pid <- 4806702
)
drainage_area <- getProperty(inputs, site, prop)
View(drainage_area)
inputs = list(
varkey = 'om_element_link',
propname = 'om_element_connection',
entity_type = 'dh_properties'
#featureid = 68326
#propcode = 4806686
#pid <- 4806702
)
drainage_area <- getProperty(inputs, site, prop)
View(drainage_area)
inputs = list(
#varkey = 'om_element_link',
propname = 'om_element_connection',
entity_type = 'dh_properties'
#featureid = 68326
#propcode = 4806686
#pid <- 4806702
)
drainage_area <- getProperty(inputs, site, prop)
View(drainage_area)
