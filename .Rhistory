MonthEndyear <- year(MonthEnd)   # Year associated with last month of extracted data
MonthEndmonth <- month(MonthEnd) # Month associated with last month of extracted data
# the next three lines are for the difference calculations -- stop on 1st of month 4 (31 of month 3)
# Note: this DOES include the 1st of the next month in difference calculation
# Put a control on what date the script advances by - if date is not 1st of month, reset it
DateCheck <- as.Date(paste0(MonthEndyear,'-',MonthEndmonth,'-01'))
if (MonthEnd != DateCheck)
MonthEnd <- as.Date(paste0(MonthEndyear,'-', MonthEndmonth, '-01'))
MonthEnd <- MonthEnd-1
stopdate <- as.Date(MonthEnd)
AvgMonthlyDifference[m,2] <- stopdate
# Advance to next month or count
MonthStart <- next.month(MonthStart)
MonthEnd <- MonthEnd+1
MonthEnd <- next.month(MonthEnd)
MonthEnd <- MonthEnd-1
StartMonth_Row <- which(as.Date(all_data$Date)==as.Date(MonthStart));
StartMonth_Row <- as.numeric(StartMonth_Row)
EndMonth_Row <- which(as.Date(all_data$Date)==as.Date(MonthEnd));
EndMonth_Row <- as.numeric(EndMonth_Row)
Start_new <- which(year$Counter==StartMonth_Row)
End_new <- which(year$Counter==EndMonth_Row)
m <- m + 1
}
Timespan_Difference[x:y, 1] <- AvgMonthlyDifference[,1] # save the difference entries from AvgMonthlyDifference
Timespan_Difference[x:y, 2] <- AvgMonthlyDifference[,2] # save the dates
# advance Timespan_Difference for next run
x <- x + 12
y <- y + 12
YearStart <- as.Date(YearStart) + 365  # Advance 1 year
YearEnd <- as.Date(YearEnd) + 365     # Advance 1 year & 2 months (from 10-01 to 11-30)
# Put a control on what date the script advances by - if end date is not 11-30, reset it
# - if begin date is not -10-01, reset it
YearBeginyear <- year(YearStart)  # pull year of beginning year
YearBeginCheck <- as.Date(paste0(YearBeginyear,'-10-01'))
if (YearBeginyear != YearBeginCheck)
YearStart <- as.Date(paste0(YearBeginyear,'-10-01'))
YearEndyear <- year(YearEnd)  # pull year of ending year
YearEndCheck <- as.Date(paste0(YearEndyear,'-11-30'))
if (YearEnd != YearEndCheck)
YearEnd <- as.Date(paste0(YearEndyear,'-11-30'))
YearStart_Row <- which(as.Date(all_data$Date)== as.Date(YearStart))
YearEnd_Row <- which(as.Date(all_data$Date) == as.Date(YearEnd))
i <- i + 1
for (i in 1:loop){                                # run loop for an entire data series
year <- all_data[YearStart_Row:YearEnd_Row,] # specify year: 10-01-year1 to 11-30-year2
m <- 1                                        # counter for nested loop
MonthStart <- YearStart  # first date for 3 month timespan
doi <- as.Date(MonthStart)
doi <- doi + seq(0,365,31)
# doi= date of interest. dummy variable just to create the function next.month
next.month <- function(doi) as.Date(as.yearmon(doi) + 1/12) +  as.numeric(as.Date(doi)-(as.Date(as.yearmon(doi))))
#(re)initalize variables for the nested loop
MonthEnd <-data.frame(next.month(doi));  # last date in 3 month timespan - used function to determine 3rd month
MonthEnd <- MonthEnd[3,1]-2 # specifies end of month 3 as last date
# (technically specifies 01 of month 4)
# row numbers corresponding with start and end dates, as a number. See note below
MonthStart_Row <- as.numeric(which(as.Date(all_data$Date)==as.Date(MonthStart)))
MonthEnd_Row <- as.numeric(which(as.Date(all_data$Date)==as.Date(MonthEnd)))
# Note: Counter column is used here to specify which row starts MonthStart and MonthEnd_Row.
# When rows are pulled from year row numbers are also pulled,
# so a counter must be used for proper row numbers.
Start_new <- as.numeric(which(year$Counter==MonthStart_Row))
End_new <- as.numeric(which(year$Counter==MonthEnd_Row))
# begin nested loop
for (m in 1:12){
month_time <- year[Start_new:End_new ,]         #extract data for 3 month timespan within year of interest
avgmonth_scenario1 <- mean(month_time$`Scenario 1 Flow`)   # find average of scenario 1 flow for 3 months
avgmonth_scenario2 <- mean(month_time$`Scenario 2 Flow`) # find average of scenario 2 flow for 3 months
AvgMonthlyDifference[m,1] <- (avgmonth_scenario1 - avgmonth_scenario2)/ avgmonth_scenario1 * 100  # percent difference between scenarios
MonthEnd<-as.Date(MonthEnd)
MonthEnd<-MonthEnd+1
MonthEndyear <- year(MonthEnd)   # Year associated with last month of extracted data
MonthEndmonth <- month(MonthEnd) # Month associated with last month of extracted data
# the next three lines are for the difference calculations -- stop on 1st of month 4 (31 of month 3)
# Note: this DOES include the 1st of the next month in difference calculation
# Put a control on what date the script advances by - if date is not 1st of month, reset it
DateCheck <- as.Date(paste0(MonthEndyear,'-',MonthEndmonth,'-01'))
if (MonthEnd != DateCheck)
MonthEnd <- as.Date(paste0(MonthEndyear,'-', MonthEndmonth, '-01'))
MonthEnd <- MonthEnd-1
stopdate <- as.Date(MonthEnd)
AvgMonthlyDifference[m,2] <- stopdate
# Advance to next month or count
MonthStart <- next.month(MonthStart)
MonthEnd <- MonthEnd+1
MonthEnd <- next.month(MonthEnd)
MonthEnd <- MonthEnd-1
StartMonth_Row <- which(as.Date(all_data$Date)==as.Date(MonthStart));
StartMonth_Row <- as.numeric(StartMonth_Row)
EndMonth_Row <- which(as.Date(all_data$Date)==as.Date(MonthEnd));
EndMonth_Row <- as.numeric(EndMonth_Row)
Start_new <- which(year$Counter==StartMonth_Row)
End_new <- which(year$Counter==EndMonth_Row)
m <- m + 1
}
Timespan_Difference[x:y, 1] <- AvgMonthlyDifference[,1] # save the difference entries from AvgMonthlyDifference
Timespan_Difference[x:y, 2] <- AvgMonthlyDifference[,2] # save the dates
# advance Timespan_Difference for next run
x <- x + 12
y <- y + 12
YearStart <- as.Date(YearStart) + 365  # Advance 1 year
YearEnd <- as.Date(YearEnd) + 365     # Advance 1 year & 2 months (from 10-01 to 11-30)
# Put a control on what date the script advances by - if end date is not 11-30, reset it
# - if begin date is not -10-01, reset it
YearBeginyear <- year(YearStart)  # pull year of beginning year
YearBeginCheck <- as.Date(paste0(YearBeginyear,'-10-01'))
if (YearBeginyear != YearBeginCheck)
YearStart <- as.Date(paste0(YearBeginyear,'-10-01'))
YearEndyear <- year(YearEnd)  # pull year of ending year
YearEndCheck <- as.Date(paste0(YearEndyear,'-11-30'))
if (YearEnd != YearEndCheck)
YearEnd <- as.Date(paste0(YearEndyear,'-11-30'))
YearStart_Row <- which(as.Date(all_data$Date)== as.Date(YearStart))
YearEnd_Row <- which(as.Date(all_data$Date) == as.Date(YearEnd))
i <- i + 1
}
all_data <- data.frame(data1$date, data1$flow, data2$flow)
all_data$counter <- 1:length(all_data$data1.date) # counter fixes issues with row numbers later on in script
colnames(all_data) <- c('Date', 'Scenario 1 Flow', 'Scenario 2 Flow', 'Counter')
# find the first date for which data is collected, (in date format)
# and a date that is roughly one year and two months past the first date
YearStart <- as.character(as.Date(all_data$Date[1]))
fixer <- as.numeric(which(all_data$Date == paste0((year(YearStart)+1),"-11-30")))
YearEnd <- as.character(as.Date(all_data$Date[fixer]))
# YearStart_Row and YearEnd_Row are the rows corresponding the the YearStart and YearEnd dates
YearStart_Row <- as.numeric(which(all_data$Date==YearStart))
YearEnd_Row <- as.numeric(which(all_data$Date==YearEnd))
# initalize dataframes and counters, assign names for dataframe columns
#AvgMonthlyDifference: used within nested for loop to create a 1x12 matrix that holds 1 year of 3 month difference segments
#Timespan_Difference: used in large loop to store values from AvgMonthlyDifference; holds entire timespan of 3 month difference segments
AvgMonthlyDifference <- data.frame(matrix(nrow=1,ncol=1));
names(AvgMonthlyDifference)<-'Difference'
Timespan_Difference <- data.frame(matrix(nrow=1, ncol=1));
names(Timespan_Difference)<-'Difference'
i <- 1; # used for first for loop to advance a year
x <- 1 # x and y used to advance dataframes
y <- 12
# Note: Counter column is used here to specify which row starts MonthStart and MonthEnd_Row.
# When rows are pulled from year row numbers are also pulled,
# so a counter must be used for proper row numbers.
Start_new <- as.numeric(which(year$Counter==MonthStart_Row))
End_new <- as.numeric(which(year$Counter==MonthEnd_Row))
all_data <- data.frame(data1$date, data1$flow, data2$flow)
all_data$counter <- 1:length(all_data$data1.date) # counter fixes issues with row numbers later on in script
colnames(all_data) <- c('Date', 'Scenario 1 Flow', 'Scenario 2 Flow', 'Counter')
# find the first date for which data is collected, (in date format)
# and a date that is roughly one year and two months past the first date
YearStart <- as.character(as.Date(all_data$Date[1]))
fixer <- as.numeric(which(all_data$Date == paste0((year(YearStart)+1),"-11-30")))
YearEnd <- as.character(as.Date(all_data$Date[fixer]))
# YearStart_Row and YearEnd_Row are the rows corresponding the the YearStart and YearEnd dates
YearStart_Row <- as.numeric(which(all_data$Date==YearStart))
YearEnd_Row <- as.numeric(which(all_data$Date==YearEnd))
# initalize dataframes and counters, assign names for dataframe columns
#AvgMonthlyDifference: used within nested for loop to create a 1x12 matrix that holds 1 year of 3 month difference segments
#Timespan_Difference: used in large loop to store values from AvgMonthlyDifference; holds entire timespan of 3 month difference segments
AvgMonthlyDifference <- data.frame(matrix(nrow=1,ncol=1));
names(AvgMonthlyDifference)<-'Difference'
Timespan_Difference <- data.frame(matrix(nrow=1, ncol=1));
names(Timespan_Difference)<-'Difference'
i <- 1; # used for first for loop to advance a year
x <- 1 # x and y used to advance dataframes
y <- 12
# start loops used for yearly and monthly data  -------------------------------------------------------------
loop <- as.numeric(round(length(data1$date)/365, digits = 0))-1
for (i in 1:loop){                                # run loop for an entire data series
year <- all_data[YearStart_Row:YearEnd_Row,] # specify year: 10-01-year1 to 11-30-year2
m <- 1                                        # counter for nested loop
MonthStart <- YearStart  # first date for 3 month timespan
doi <- as.Date(MonthStart)
doi <- doi + seq(0,365,31)
# doi= date of interest. dummy variable just to create the function next.month
next.month <- function(doi) as.Date(as.yearmon(doi) + 1/12) +  as.numeric(as.Date(doi)-(as.Date(as.yearmon(doi))))
#(re)initalize variables for the nested loop
MonthEnd <-data.frame(next.month(doi));  # last date in 3 month timespan - used function to determine 3rd month
MonthEnd <- MonthEnd[3,1]-2 # specifies end of month 3 as last date
# (technically specifies 01 of month 4)
# row numbers corresponding with start and end dates, as a number. See note below
MonthStart_Row <- as.numeric(which(as.Date(all_data$Date)==as.Date(MonthStart)))
MonthEnd_Row <- as.numeric(which(as.Date(all_data$Date)==as.Date(MonthEnd)))
# Note: Counter column is used here to specify which row starts MonthStart and MonthEnd_Row.
# When rows are pulled from year row numbers are also pulled,
# so a counter must be used for proper row numbers.
Start_new <- as.numeric(which(year$Counter==MonthStart_Row))
End_new <- as.numeric(which(year$Counter==MonthEnd_Row))
# begin nested loop
for (m in 1:12){
month_time <- year[Start_new:End_new ,]         #extract data for 3 month timespan within year of interest
avgmonth_scenario1 <- mean(month_time$`Scenario 1 Flow`)   # find average of scenario 1 flow for 3 months
avgmonth_scenario2 <- mean(month_time$`Scenario 2 Flow`) # find average of scenario 2 flow for 3 months
AvgMonthlyDifference[m,1] <- (avgmonth_scenario1 - avgmonth_scenario2)/ avgmonth_scenario1 * 100  # percent difference between scenarios
MonthEnd<-as.Date(MonthEnd)
MonthEnd<-MonthEnd+1
MonthEndyear <- year(MonthEnd)   # Year associated with last month of extracted data
MonthEndmonth <- month(MonthEnd) # Month associated with last month of extracted data
# the next three lines are for the difference calculations -- stop on 1st of month 4 (31 of month 3)
# Note: this DOES include the 1st of the next month in difference calculation
# Put a control on what date the script advances by - if date is not 1st of month, reset it
DateCheck <- as.Date(paste0(MonthEndyear,'-',MonthEndmonth,'-01'))
if (MonthEnd != DateCheck)
MonthEnd <- as.Date(paste0(MonthEndyear,'-', MonthEndmonth, '-01'))
MonthEnd <- MonthEnd-1
stopdate <- as.Date(MonthEnd)
AvgMonthlyDifference[m,2] <- stopdate
# Advance to next month or count
MonthStart <- next.month(MonthStart)
MonthEnd <- MonthEnd+1
MonthEnd <- next.month(MonthEnd)
MonthEnd <- MonthEnd-1
StartMonth_Row <- which(as.Date(all_data$Date)==as.Date(MonthStart));
StartMonth_Row <- as.numeric(StartMonth_Row)
EndMonth_Row <- which(as.Date(all_data$Date)==as.Date(MonthEnd));
EndMonth_Row <- as.numeric(EndMonth_Row)
Start_new <- which(year$Counter==StartMonth_Row)
End_new <- which(year$Counter==EndMonth_Row)
m <- m + 1
}
Timespan_Difference[x:y, 1] <- AvgMonthlyDifference[,1] # save the difference entries from AvgMonthlyDifference
Timespan_Difference[x:y, 2] <- AvgMonthlyDifference[,2] # save the dates
# advance Timespan_Difference for next run
x <- x + 12
y <- y + 12
YearStart <- as.Date(YearStart) + 365  # Advance 1 year
YearEnd <- as.Date(YearEnd) + 365     # Advance 1 year & 2 months (from 10-01 to 11-30)
# Put a control on what date the script advances by - if end date is not 11-30, reset it
# - if begin date is not -10-01, reset it
YearBeginyear <- year(YearStart)  # pull year of beginning year
YearBeginCheck <- as.Date(paste0(YearBeginyear,'-10-01'))
if (YearBeginyear != YearBeginCheck)
YearStart <- as.Date(paste0(YearBeginyear,'-10-01'))
YearEndyear <- year(YearEnd)  # pull year of ending year
YearEndCheck <- as.Date(paste0(YearEndyear,'-11-30'))
if (YearEnd != YearEndCheck)
YearEnd <- as.Date(paste0(YearEndyear,'-11-30'))
YearStart_Row <- which(as.Date(all_data$Date)== as.Date(YearStart))
YearEnd_Row <- which(as.Date(all_data$Date) == as.Date(YearEnd))
i <- i + 1
}
Timespan_Difference$Logic <- Timespan_Difference$Difference>=20 | Timespan_Difference$Difference<= -20
HighDifference <- Timespan_Difference[Timespan_Difference$Logic=='TRUE',]
HighDifference <- HighDifference[order(abs(HighDifference$Difference), decreasing = TRUE),]
names(HighDifference)<-c('Difference', 'Date', 'Logic')
# pull data for each of these 3 month segments.
HighestDifferences <- HighDifference[1:3,]
HighestDifferences$Date <- as.Date(HighestDifferences$Date)
# initalize variables for loop
differenceyear <- data.frame(matrix(nrow=1,ncol=6))
differencedates <- data.frame(matrix(nrow=1, ncol=2))
names(differenceyear)<- c('endyear', 'endmonth', 'enddate', 'startyear', 'startmonth', 'startdate')
names(differencedates)<- c('start date row', 'end date row')
storeplotdata1<- data.frame(matrix(nrow=1, ncol=4))
names(storeplotdata1)<- c('Date', 'Scenario 1 Flow', 'Scenario 2 Flow', 'Counter')
names(storeplotdata2)<- c('Date', 'Scenario 1 Flow', 'Scenario 2 Flow', 'Counter')
storeplotdata3<- data.frame(matrix(nrow=1, ncol=4))
names(storeplotdata3)<- c('Date', 'Scenario 1 Flow', 'Scenario 2 Flow', 'Counter')
q <- 1
for (q in 1:length(HighestDifferences)){
differenceyear[q,1] <- year(HighestDifferences$Date[q])  # ending year
differenceyear[q,2]<- month(HighestDifferences$Date[q]) + 1 # ending month
differenceyear[q,4]<- year(HighestDifferences$Date[q]) #startyear
differenceyear[q,5]<- month(HighestDifferences$Date[q])-2 #startmonth
if (differenceyear[q,2] > 12) { # if end month is jan, must move year up
differenceyear[q,4] <- differenceyear[q,1]
differenceyear[q,1]<- differenceyear[q,1] + 1 # year for jan moves
differenceyear[q,2] <- 1
}else if (differenceyear[q,5] == -1) {
differenceyear[q,4] <- differenceyear[q,4] - 1 # if january, go back a year and start november
differenceyear[q,5] <- 11
}else if (differenceyear[q,5] == 0) {
differenceyear[q,4] <- differenceyear[q,4] - 1 # if january, go back a year and start november
differenceyear[q,5] <- 12
} else{
differenceyear[q,1]<- differenceyear[q,1]  #endyear
differenceyear[q,2]<- differenceyear[q,2]  #endmonth
differenceyear[q,4]<- differenceyear[q,4]  #startyear
differenceyear[q,5]<- differenceyear[q,5]  #startmonth
}
differenceyear[q,3]<- paste0(differenceyear[q,1], '-',differenceyear[q,2], '-01') #enddate
differenceyear$enddate <- as.Date(differenceyear$enddate)
differenceyear[q,6]<- as.Date(paste0(differenceyear[q,4], '-', differenceyear[q,5], '-01')) #startdate
differenceyear$startdate <- as.Date(differenceyear$startdate)
differencedates[q,1]<- as.character(differenceyear$startdate[q])
differencedates[q,2]<- as.character(differenceyear$enddate[q]-1)
differencedates[q,3]<- which(as.Date(all_data$Date)==as.Date(differencedates$`start date row`[q]))
differencedates[q,4]<- which(as.Date(all_data$Date)==as.Date(differencedates$`end date row`[q]))
plot1<-all_data[differencedates$V3[q]:differencedates$V4[q],]
if (q==1){
storeplotdata1<- plot1
}else if(q==2){
storeplotdata2<- plot1
}else if(q==3){
storeplotdata3<- plot1
}
q <- q+1
}
difference1 <- signif(HighestDifferences$Difference[1], digits=3)     #Create difference variable to display on graph
difference2 <- signif(HighestDifferences$Difference[2], digits=3)
difference3 <- signif(HighestDifferences$Difference[3], digits=3)
# CREATES OUTPUT MATRIX -------------------------------------------------------
avg_scenario1 <- mean(data1$flow)
avg_scenario2 <- mean(data2$flow)
# also want to list the number of timespans that were over 20% difference.
over20 <- signif(nrow(HighDifference)/nrow(Timespan_Difference)*100, digits=3)
OUTPUT_MATRIX <- matrix(c(avg_scenario1, avg_scenario2, over20), nrow=1, ncol=3)
colnames(OUTPUT_MATRIX) = c('Scenario 1', 'Scenario 2', 'Difference>20 (%)')
overall_difference <- signif((OUTPUT_MATRIX[1,1]-OUTPUT_MATRIX[1,2])/OUTPUT_MATRIX[1,1]*100, digits=3)
OUTPUT_MATRIX <- matrix(c(over20, percent_difference[3,]), nrow=1, ncol=2)
rownames(OUTPUT_MATRIX) = c("Percent")
colnames(OUTPUT_MATRIX) = c('Difference > 20%', 'Overall Difference')
OUTPUT_MATRIX <- signif(as.numeric(OUTPUT_MATRIX, digits = 2))
OUTPUT_MATRIX <- kable(format(OUTPUT_MATRIX, digits = 3))
# plot for highest difference
# Max/min for y axis scaling
max <- max(c(max(storeplotdata1$`Scenario 1 Flow`), max(storeplotdata1$`Scenario 2 Flow`)));
min <- min(c(max(storeplotdata1$`Scenario 1 Flow`), max(storeplotdata1$`Scenario 2 Flow`)));
xpos2 <- max(storeplotdata1$Date)-20
# Creating and exporting plot
df <- data.frame(as.Date(storeplotdata1$Date), storeplotdata1$`Scenario 1 Flow`, storeplotdata1$`Scenario 2 Flow`);
colnames(df) <- c('Date', 'Scenario1', 'Scenario2')
options(scipen=5, width = 1400, height = 950)
# plot for second highest difference
# Max/min for y axis scaling
max <- max(c(max(storeplotdata2$`Scenario 1 Flow`), max(storeplotdata2$`Scenario 2 Flow`)));
xpos1 <- min(storeplotdata2$Date)+20
xpos2 <- max(storeplotdata2$Date)-20
# Creating and exporting plot
df <- data.frame(as.Date(storeplotdata2$Date), storeplotdata2$`Scenario 1 Flow`, storeplotdata2$`Scenario 2 Flow`);
colnames(df) <- c('Date', 'Scenario1', 'Scenario2')
difference2plot <- ggplot(df, aes(x=Date)) +
geom_line(aes(y=Scenario1, color=name_scenario1), size=1) +
geom_line(aes(y=Scenario2, color=name_scenario2), size=1)+
theme_bw()+
theme(legend.position="top",
legend.title=element_blank(),
legend.box = "horizontal",
legend.background = element_rect(fill="white",
size=0.5, linetype="solid",
colour ="white"),
legend.text=element_text(size=14),
axis.text=element_text(size=14, colour="black"),
axis.title=element_text(size=14, colour="black"),
axis.line = element_line(colour = "black",
size = 0.5, linetype = "solid"),
axis.ticks = element_line(colour="black"),
panel.grid.major=element_line(colour = "light grey"),
panel.grid.minor=element_blank())+
scale_colour_manual(values=c("black","red"))+
guides(colour = guide_legend(override.aes = list(size=5)))+
annotate("text", x=xpos1, y=max, label= paste0('Difference:', '',difference2, '', '%'), size=5)+
annotate("text", x=xpos2, y=max, label= paste0('Date Range: ', '',
min(storeplotdata2$Date),': ', max(storeplotdata2$Date)), size=5)+
labs(y = "Flow (cfs)")
# plot for third highest difference
# Max/min for y axis scaling
max <- max(c(max(storeplotdata3$`Scenario 1 Flow`), max(storeplotdata3$`Scenario 2 Flow`)));
min <- min(c(max(storeplotdata3$`Scenario 1 Flow`), max(storeplotdata3$`Scenario 2 Flow`)));
xpos1 <- min(storeplotdata3$Date)+20
xpos2 <- max(storeplotdata3$Date)-20
# Creating and exporting plot
df <- data.frame(as.Date(storeplotdata3$Date), storeplotdata3$`Scenario 1 Flow`, storeplotdata3$`Scenario 2 Flow`);
colnames(df) <- c('Date', 'Scenario1', 'Scenario2')options(scipen=5, width = 1400, height = 950)
difference3plot <- ggplot(df, aes(x=Date)) +
geom_line(aes(y=Scenario1, color=name_scenario1), size=1) +
geom_line(aes(y=Scenario2, color=name_scenario2), size=1)+
theme_bw()+
theme(legend.position="top",
legend.title=element_blank(),
legend.box = "horizontal",
legend.background = element_rect(fill="white",
size=0.5, linetype="solid",
colour ="white"),
legend.text=element_text(size=14),
axis.text=element_text(size=14, colour="black"),
axis.title=element_text(size=14, colour="black"),
axis.line = element_line(colour = "black",
size = 0.5, linetype = "solid"),
axis.ticks = element_line(colour="black"),
panel.grid.major=element_line(colour = "light grey"),
panel.grid.minor=element_blank())+
scale_colour_manual(values=c("black","red"))+
guides(colour = guide_legend(override.aes = list(size=5)))+
annotate("text", x=xpos1, y=max, label= paste0('Difference:', '',difference3, '', '%'), size=5)+
annotate("text", x=xpos2, y=max, label= paste0('Date Range: ', '',
min(storeplotdata3$Date),': ', max(storeplotdata3$Date)), size=5)+
labs(y = "Flow (cfs)")
# Creating and exporting plot
df <- data.frame(as.Date(storeplotdata3$Date), storeplotdata3$`Scenario 1 Flow`, storeplotdata3$`Scenario 2 Flow`);
# Creating and exporting plot
df <- data.frame(as.Date(storeplotdata3$Date), storeplotdata3$`Scenario 1 Flow`, storeplotdata3$`Scenario 2 Flow`);
colnames(df) <- c('Date', 'Scenario1', 'Scenario2')
# Creating and exporting plot
df <- data.frame(as.Date(storeplotdata3$Date), storeplotdata3$`Scenario 1 Flow`, storeplotdata3$`Scenario 2 Flow`);
View(df)
colnames(df) <- c('Date', 'Scenario1', 'Scenario2')
View(df)
options(scipen=5, width = 1400, height = 950)
difference3plot <- ggplot(df, aes(x=Date)) +
geom_line(aes(y=Scenario1, color=name_scenario1), size=1) +
geom_line(aes(y=Scenario2, color=name_scenario2), size=1)+
theme_bw()+
theme(legend.position="top",
legend.title=element_blank(),
legend.box = "horizontal",
legend.background = element_rect(fill="white",
size=0.5, linetype="solid",
colour ="white"),
legend.text=element_text(size=14),
axis.text=element_text(size=14, colour="black"),
axis.title=element_text(size=14, colour="black"),
axis.line = element_line(colour = "black",
size = 0.5, linetype = "solid"),
axis.ticks = element_line(colour="black"),
panel.grid.major=element_line(colour = "light grey"),
panel.grid.minor=element_blank())+
scale_colour_manual(values=c("black","red"))+
guides(colour = guide_legend(override.aes = list(size=5)))+
annotate("text", x=xpos1, y=max, label= paste0('Difference:', '',difference3, '', '%'), size=5)+
annotate("text", x=xpos2, y=max, label= paste0('Date Range: ', '',
min(storeplotdata3$Date),': ', max(storeplotdata3$Date)), size=5)+
labs(y = "Flow (cfs)")
source(paste0(container, "/cbp6/code/cbp6_functions.R"))
library(rstudioapi)
# Setting active directory
current_path <- rstudioapi::getActiveDocumentContext()$path
# Setting up output location
split.location <- strsplit(current_path, split = '/')
split.location <- as.vector(split.location[[1]])
basepath.stop <- as.numeric(which(split.location == 'GitHub'))
container <- paste0(split.location[1:basepath.stop], collapse = "/")
source(paste0(container, "/cbp6/code/cbp6_functions.R"))
source(paste0(container, "/rest_functions.R"))
met.varkey <- "monthly_low_flow"
met.propcode <- "ml3"
seg.or.gage <- "02077500"
site = "http://deq2.bse.vt.edu/d.dh"
vahydro_import_metric(met.varkey, met.propcode, seg.or.gage, mod.scenario = "p532cal_062211", token, site = "http://deq2.bse.vt.edu/d.bet")
rest_token <- function(base_url, token, rest_uname = FALSE, rest_pw = FALSE) {
#base_url <- 'http://deq1.bse.vt.edu/d.bet'
#rest_uname <- 'test'
#rest_pw <- 'test'
#Cross-site Request Forgery Protection (Token required for POST and PUT operations)
csrf_url <- paste(base_url,"restws/session/token/",sep="/");
#IF THE OBJECTS 'rest_uname' or 'rest_pw' DONT EXIST, USER INPUT REQUIRED
if (!is.character(rest_uname) | !(is.character(rest_pw))){
rest_uname <- c() #initialize username object
rest_pw <- c()    #initialize password object
#currently set up to allow infinite login attempts, but this can easily be restricted to a set # of attempts
token <- c("rest_uname","rest_pw") #used in while loop below, "length of 2"
login_attempts <- 1
if (!is.character(rest_uname)) {
print(paste("REST AUTH INFO MUST BE SUPPLIED",sep=""))
while(length(token) == 2  && login_attempts <= 5){
print(paste("login attempt #",login_attempts,sep=""))
rest_uname <- readline(prompt="Enter REST user name: ")
rest_pw <- readline(prompt="Password: ")
csrf <- GET(url=csrf_url,authenticate(rest_uname,rest_pw));
token <- content(csrf);
#print(token)
if (length(token)==2){
print("Sorry, unrecognized username or password")
}
login_attempts <- login_attempts + 1
}
if (login_attempts > 5){print(paste("ALLOWABLE NUMBER OF LOGIN ATTEMPTS EXCEEDED"))}
}
} else {
print(paste("REST AUTH INFO HAS BEEN SUPPLIED",sep=""))
print(paste("RETRIEVING REST TOKEN",sep=""))
csrf <- GET(url=csrf_url,authenticate(rest_uname,rest_pw));
token <- content(csrf);
}
if (length(token)==1){
print("Login attempt successful")
print(paste("token = ",token,sep=""))
} else {
print("Login attempt unsuccessful")
}
token <- token
} #close function
# LIBRARIES ---------------------------------------------------------------
library('IHA')
library('PearsonDS')
library('zoo')
library('lubridate')
library('lfstat')
library('ggplot2')
library('scales')
library('IHA')
library('knitr')
# SOURCING CALCULATING FUNCTION -------------------------------------------
source(paste0(container, "\\code\\function_holder.R"));
source(paste(hydro_tools,"VAHydro-2.0/rest_functions.R", sep = "/"));
# INPUTS ------------------------------------------------------------------
# Link to hydro-tools folder within GitHub folder
basepath='C:\\Users\\danie\\Documents\\HARP\\GitHub\\hydro-tools';
source(paste(basepath,"VAHydro-2.0/rest_functions.R", sep = "/"));
token <- rest_token(site, token, rest_uname, rest_pw);
#retrieve rest token
source(paste(basepath,"auth.private", sep = "/"));#load rest username and password, contained in auth.private file
token <- rest_token(site, token, rest_uname, rest_pw);
#source(paste(hydro_tools, "HARP-2018/DEQ_Model_vs_USGS_Comparison_Northern/code/fn_gage+seg_mapper.R", sep = "/"));
source(paste(hydro_tools, "HARP-2018/DEQ_Model_vs_USGS_Comparison_Northern/code/fn_gage+seg_mapper_fromNWIS.R", sep = "/"));
source(paste(basepath,"VAHydro-2.0/rest_functions.R", sep = "/"));
#retrieve rest token
source(paste(basepath,"auth.private", sep = "/"));#load rest username and password, contained in auth.private file
token <- rest_token(site, token, rest_uname, rest_pw);
site
vahydro_import_metric(met.varkey, met.propcode, seg.or.gage, mod.scenario = "p532cal_062211", token, site = "http://deq2.bse.vt.edu/d.bet")
vahydro_import_metric(met.varkey, met.propcode, seg.or.gage, mod.scenario = "p532cal_062211", token, site = "http://deq2.bse.vt.edu/d.dh")
vahydro_import_metric(met.varkey, met.propcode, seg.or.gage, mod.scenario = "p532cal_062211", token, site = "http://deq2.bse.vt.edu/d.dh")
vahydro_import_metric('monthly_low_flow','ml3', '02077500', mod.scenario = 'p532cal_062211', token, site)
